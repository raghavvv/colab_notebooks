{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8024929,"sourceType":"datasetVersion","datasetId":4729219}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport seaborn as sns\nimport cmath\nimport math\nimport time\nimport matplotlib.pyplot as plt \nimport re\nfrom numba import jit\nimport random\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-11T11:52:29.357794Z","iopub.execute_input":"2024-06-11T11:52:29.358414Z","iopub.status.idle":"2024-06-11T11:52:29.375797Z","shell.execute_reply.started":"2024-06-11T11:52:29.358366Z","shell.execute_reply":"2024-06-11T11:52:29.374511Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/new-dielectric2/dielectric_restructured_2.csv')\ndf[['epsilon_real', 'epsilon_imag']] = df['Epsilon'].str.strip('()j').str.split('+', expand=True).astype(float)\nmu_values = df['Mu'].apply(lambda x: re.findall(r'[-+]?\\d*\\.\\d+|\\d+', x))\ndf[['mu_real', 'mu_imag']] = pd.DataFrame(mu_values.tolist(), dtype=float)\ndf[['mu_real', 'mu_imag']] = df[['mu_real', 'mu_imag']].astype(float)\ndf['mu_imag'] = -1 * df['mu_imag']\ndf['epsilon_imag'] = -1 * df['epsilon_imag']\ndf.drop(['Epsilon'], axis=1, inplace=True)\ndf.drop(['Mu'], axis=1, inplace=True)\n\ndf['Thickness(m)'] = df['Thickness(mm)'] / 1e3\ndf['Thickness(m)'] = df['Thickness(m)'].clip(0.00005, 0.0005).round(6)  # Ensure thickness is within the desired range\ndf.drop(['Thickness(mm)'], axis=1, inplace=True)\n\ndf['Frequency'] = df['Frequency(GHz)'] * 1e9\ndf.drop(['Frequency(GHz)'], axis=1, inplace=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.377780Z","iopub.execute_input":"2024-06-11T11:52:29.378248Z","iopub.status.idle":"2024-06-11T11:52:29.436785Z","shell.execute_reply.started":"2024-06-11T11:52:29.378166Z","shell.execute_reply":"2024-06-11T11:52:29.435339Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"      S.No.  Material ID  epsilon_real  epsilon_imag  mu_real  mu_imag  \\\n0         1            1      320.6301     -495.4431   1.0000    -0.00   \n1         2            1      320.6301     -495.4431   1.0000    -0.00   \n2         3            1      320.6301     -495.4431   1.0000    -0.00   \n3         4            1      320.6301     -495.4431   1.0000    -0.00   \n4         5            1      320.6301     -495.4431   1.0000    -0.00   \n...     ...          ...           ...           ...      ...      ...   \n1495   1496            3        3.1563       -0.3053   0.9768    -0.09   \n1496   1497            3        3.1563       -0.3053   0.9768    -0.09   \n1497   1498            3        3.1563       -0.3053   0.9768    -0.09   \n1498   1499            3        3.1563       -0.3053   0.9768    -0.09   \n1499   1500            3        3.1563       -0.3053   0.9768    -0.09   \n\n      Thickness(m)     Frequency  \n0          0.00005  8.000000e+09  \n1          0.00010  8.000000e+09  \n2          0.00015  8.000000e+09  \n3          0.00020  8.000000e+09  \n4          0.00025  8.000000e+09  \n...            ...           ...  \n1495       0.00050  1.200000e+10  \n1496       0.00050  1.200000e+10  \n1497       0.00050  1.200000e+10  \n1498       0.00050  1.200000e+10  \n1499       0.00050  1.200000e+10  \n\n[1500 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>S.No.</th>\n      <th>Material ID</th>\n      <th>epsilon_real</th>\n      <th>epsilon_imag</th>\n      <th>mu_real</th>\n      <th>mu_imag</th>\n      <th>Thickness(m)</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00005</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00010</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00015</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00020</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00025</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1495</th>\n      <td>1496</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1496</th>\n      <td>1497</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1497</th>\n      <td>1498</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1498</th>\n      <td>1499</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1499</th>\n      <td>1500</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n  </tbody>\n</table>\n<p>1500 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"frequencies = [8e9, 9e9, 10e9, 11e9, 12e9]\npopulation_size = 6000\nnum_layers = 7\nnum_generations = 100\ncrossover_rate = 0.6\nmutation_rate = 0.2","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.438474Z","iopub.execute_input":"2024-06-11T11:52:29.438975Z","iopub.status.idle":"2024-06-11T11:52:29.445407Z","shell.execute_reply.started":"2024-06-11T11:52:29.438924Z","shell.execute_reply":"2024-06-11T11:52:29.444060Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"# Air properties\nair_id = 0\nair_eps = 1 + 0j\nair_mu = 1 + 0j\nair_thickness = 0  # Thickness of air layers\n\ndf_air = pd.DataFrame({\n    'Material ID': [air_id] * len(frequencies),\n    'Frequency': frequencies,\n    'epsilon_real': [air_eps.real] * len(frequencies),\n    'epsilon_imag': [air_eps.imag] * len(frequencies),\n    'mu_real': [air_mu.real] * len(frequencies),\n    'mu_imag': [air_mu.imag] * len(frequencies),\n    'Thickness(m)': [air_thickness] * len(frequencies)\n})\n\ndf = pd.concat([df, df_air], ignore_index=True)\n\n# Create a dictionary for frequency-specific properties\nmaterial_properties = {}\nfor _, row in df.iterrows():\n    material_id = row['Material ID']\n    frequency = row['Frequency']\n    if material_id not in material_properties:\n        material_properties[material_id] = {}\n    material_properties[material_id][frequency] = {\n        'epsilon': row['epsilon_real'] + 1j * row['epsilon_imag'],\n        'mu': row['mu_real'] + 1j * row['mu_imag'],\n        'thickness': row['Thickness(m)']\n    }","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.448603Z","iopub.execute_input":"2024-06-11T11:52:29.449141Z","iopub.status.idle":"2024-06-11T11:52:29.578493Z","shell.execute_reply.started":"2024-06-11T11:52:29.449093Z","shell.execute_reply":"2024-06-11T11:52:29.576393Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"def tmm(f, d, eps, mu):\n    \n    c = 3e8  # Speed of light in m/s\n    \n    M_total = np.identity(2, dtype=complex)\n    \n    for i in range(0, len(eps)-1):\n        k = (2 * np.pi * f / c) * np.sqrt(eps[i] * mu[i])\n        \n        M_propagation = np.array([[np.exp(-1j * k * d[i]), 0], [0, np.exp(1j * k * d[i])]], dtype=complex)\n        \n        Z = np.sqrt(mu[i] / eps[i])\n        Z_next = np.sqrt(mu[i+1] / eps[i+1])\n        \n        R = (Z - Z_next) / (Z_next + Z)\n        T = (2 * Z) / (Z_next + Z)\n        \n        # Check if T is close to zero, and handle the division by zero case\n        #if np.abs(T) < 1e-6:\n            #M_boundary = 0.5 * np.array([[1 + (Z / Z_next), 1 - (Z / Z_next)], [1 - (Z / Z_next), 1 + (Z / Z_next)]], dtype=complex)\n        #else:\n        M_boundary = np.array([[1, R], [R, 1]], dtype=complex)\n        \n        #M_boundary_inv = np.linalg.inv(M_boundary)\n        \n        M_total = (1/T) * np.matmul(np.matmul(M_boundary, M_propagation), M_total)\n    \n    R1 = -1 * (M_total[1, 0] / M_total[1, 1])  #if abs(M_total[0, 0]) > 1e-6 else 1.0\n    T1 = (M_total[0,0] + (M_total[0,1]*R1)) #if abs(M_total[0, 0]) > 1e-6 else 0.0 \n    \n    R2 = np.abs(R1)**2\n    T2 = np.abs(T1)**2\n    return R2, T2\n\ndef calculate_shielding_effectiveness(R2,T2):\n    emi_se = 10*np.log10(1/(np.abs(T2)))\n    return emi_se\n\ndef calculate_absorption(R2,T2):\n    absorption = 1 - (R2 + T2)\n    return absorption\n\nf = 8e9\nd = [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0]\neps = [(1+0j), (44.0257-58.6855j), (3.3595-0.03338j), (320.6301-495.4431j), (44.0257-58.6855j), (3.3595-0.03338j), (1+0j)]\nmu = [(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0j), (0.883-0.0324j), (1+0j)]\n\n\nR, T = tmm(f, d, eps, mu)\nshielding_effectiveness = calculate_shielding_effectiveness(R,T)\nabsorption = calculate_absorption(R,T)\n\nprint(\"reflection:\", R)\nprint(\"transmission:\", T)\nprint(\"shielding effectiveness:\", shielding_effectiveness)\nprint(\"absorption:\", absorption)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.580813Z","iopub.execute_input":"2024-06-11T11:52:29.581622Z","iopub.status.idle":"2024-06-11T11:52:29.600572Z","shell.execute_reply.started":"2024-06-11T11:52:29.581567Z","shell.execute_reply":"2024-06-11T11:52:29.599030Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"reflection: 0.8107749943432702\ntransmission: 0.005069576408021708\nshielding effectiveness: 22.950283269278362\nabsorption: 0.1841554292487081\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_initial_population(material_properties, frequencies, population_size, num_layers):\n    population = []\n    for _ in range(population_size):\n        structure = [{'Material ID': air_id, 'Frequency': freq} for freq in frequencies]  # First layer is air\n        for _ in range(num_layers - 2):\n            material_id = random.choice(list(material_properties.keys()))\n            while len(structure) > 1 and structure[-1]['Material ID'] == material_id:\n                material_id = random.choice(list(material_properties.keys()))\n            structure.append({'Material ID': material_id, 'Frequency': frequencies[1]})\n        structure.append({'Material ID': air_id, 'Frequency': frequencies[1]})  # Last layer is air\n        population.append(structure)\n    return population\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.602664Z","iopub.execute_input":"2024-06-11T11:52:29.603219Z","iopub.status.idle":"2024-06-11T11:52:29.621469Z","shell.execute_reply.started":"2024-06-11T11:52:29.603177Z","shell.execute_reply":"2024-06-11T11:52:29.620036Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"def evaluate_fitness(structure, frequencies):\n    total_absorption = 0\n    \n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        E = calculate_shielding_effectiveness(R,T)\n        \n        total_absorption += A\n    \n    average_absorption = total_absorption / len(frequencies)\n    \n    return average_absorption","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.625035Z","iopub.execute_input":"2024-06-11T11:52:29.626182Z","iopub.status.idle":"2024-06-11T11:52:29.640330Z","shell.execute_reply.started":"2024-06-11T11:52:29.626132Z","shell.execute_reply":"2024-06-11T11:52:29.638458Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"# Select parents\ndef select_parents(population, fitnesses, num_parents):\n    parents = random.choices(population, weights=fitnesses, k=num_parents)\n    return parents","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.642157Z","iopub.execute_input":"2024-06-11T11:52:29.642621Z","iopub.status.idle":"2024-06-11T11:52:29.656817Z","shell.execute_reply.started":"2024-06-11T11:52:29.642580Z","shell.execute_reply":"2024-06-11T11:52:29.655039Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"def crossover(parents, crossover_rate):\n    offspring = []\n    for _ in range(len(parents) // 2):\n        parent1 = random.choice(parents)\n        parent2 = random.choice(parents)\n        if random.random() < crossover_rate:\n            crossover_point = random.randint(1, len(parent1) - 2)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness}]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness}]\n            offspring.append(child1)\n            offspring.append(child2)\n        else:\n            offspring.append(parent1)\n            offspring.append(parent2)\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.658587Z","iopub.execute_input":"2024-06-11T11:52:29.658990Z","iopub.status.idle":"2024-06-11T11:52:29.671163Z","shell.execute_reply.started":"2024-06-11T11:52:29.658952Z","shell.execute_reply":"2024-06-11T11:52:29.669328Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"def mutate(offspring, mutation_rate, material_properties):\n    for child in offspring:\n        if random.random() < mutation_rate:\n            mutation_point = random.randint(1, len(child) - 2)\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while len(child) > 1 and child[mutation_point - 1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            #thickness = np.random.uniform(0.0001, 0.0003)\n            child[mutation_point] = {'Material ID': material_id, 'Frequency': random.choice(frequencies)} #'Thickness': thickness}\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.673228Z","iopub.execute_input":"2024-06-11T11:52:29.673718Z","iopub.status.idle":"2024-06-11T11:52:29.690631Z","shell.execute_reply.started":"2024-06-11T11:52:29.673673Z","shell.execute_reply":"2024-06-11T11:52:29.689248Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"def genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate):\n    population = generate_initial_population(material_properties, frequencies, population_size, num_layers)\n    for generation in range(num_generations):\n        fitnesses = [evaluate_fitness(structure, frequencies) for structure in population]\n        print(f\"Generation {generation}: Best Fitness = {max(fitnesses)}\")  # Debugging statement\n        if max(fitnesses) > 0.75:\n            break\n        parents = select_parents(population, fitnesses, population_size // 2)\n        offspring = crossover(parents, crossover_rate)\n        population = mutate(offspring, mutation_rate, material_properties)\n    return population, fitnesses","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.693439Z","iopub.execute_input":"2024-06-11T11:52:29.693923Z","iopub.status.idle":"2024-06-11T11:52:29.704360Z","shell.execute_reply.started":"2024-06-11T11:52:29.693886Z","shell.execute_reply":"2024-06-11T11:52:29.703101Z"},"trusted":true},"execution_count":68,"outputs":[]},{"cell_type":"code","source":"population, fitnesses = genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate)\n\n# Filter structures with absorption > 0.75\nfiltered_structures = [structure for structure, fitness in zip(population, fitnesses) if fitness > 0.75]","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:52:29.706016Z","iopub.execute_input":"2024-06-11T11:52:29.706511Z","iopub.status.idle":"2024-06-11T11:53:21.377422Z","shell.execute_reply.started":"2024-06-11T11:52:29.706467Z","shell.execute_reply":"2024-06-11T11:53:21.376166Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"Generation 0: Best Fitness = 0.5193998664557229\nGeneration 1: Best Fitness = 0.570210476686693\nGeneration 2: Best Fitness = 0.5702104766866933\nGeneration 3: Best Fitness = 0.5896661651615938\nGeneration 4: Best Fitness = 0.6393341765577334\nGeneration 5: Best Fitness = 0.6393341765577334\nGeneration 6: Best Fitness = 0.7248134587685344\nGeneration 7: Best Fitness = 0.7248134587685344\nGeneration 8: Best Fitness = 0.7248134587685344\nGeneration 9: Best Fitness = 0.7248134587685344\nGeneration 10: Best Fitness = 0.7248134587685345\nGeneration 11: Best Fitness = 0.7248134587685346\nGeneration 12: Best Fitness = 0.7248134587685346\nGeneration 13: Best Fitness = 0.727400369681517\nGeneration 14: Best Fitness = 0.7249179939509078\nGeneration 15: Best Fitness = 0.7274003696815169\nGeneration 16: Best Fitness = 0.7587613056636697\n","output_type":"stream"}]},{"cell_type":"code","source":"filtered_data = []\nfor structure in filtered_structures:\n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        emi_se = calculate_shielding_effectiveness(R,T)\n        filtered_data.append({\n            'Frequency': f,\n            'Material IDs': [layer['Material ID'] for layer in structure],\n            'Thickness': d,\n            'Epsilon': eps,\n            'Mu': mu,\n            'Reflection Coefficient': R,\n            'Transmission Coefficient': T,\n            'EMI Shielding Effectiveness': emi_se,\n            'Absorption': A\n        })\n\nfiltered_df = pd.DataFrame(filtered_data)\n\n# Print filtered DataFrame\nfiltered_df","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:53:21.379048Z","iopub.execute_input":"2024-06-11T11:53:21.379445Z","iopub.status.idle":"2024-06-11T11:53:21.413126Z","shell.execute_reply.started":"2024-06-11T11:53:21.379413Z","shell.execute_reply":"2024-06-11T11:53:21.411854Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"      Frequency                                       Material IDs  \\\n0  8.000000e+09  [0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]   \n1  9.000000e+09  [0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]   \n2  1.000000e+10  [0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]   \n3  1.100000e+10  [0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]   \n4  1.200000e+10  [0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]   \n\n                                           Thickness  \\\n0  [0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...   \n1  [0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...   \n2  [0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...   \n3  [0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...   \n4  [0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...   \n\n                                             Epsilon  \\\n0  [(1+0j), (3.3595-0.03338j), (3.3595-0.03338j),...   \n1  [(1+0j), (3.1533-0.3044j), (3.1533-0.3044j), (...   \n2  [(1+0j), (3.1652-0.3126j), (3.1652-0.3126j), (...   \n3  [(1+0j), (3.1588-0.2425j), (3.1588-0.2425j), (...   \n4  [(1+0j), (3.1563-0.3053j), (3.1563-0.3053j), (...   \n\n                                                  Mu  Reflection Coefficient  \\\n0  [(1+0j), (0.883-0.0324j), (0.883-0.0324j), (1+...                0.352250   \n1  [(1+0j), (1.2109-0.1297j), (1.2109-0.1297j), (...                0.162719   \n2  [(1+0j), (1.0601-0.0698j), (1.0601-0.0698j), (...                0.153416   \n3  [(1+0j), (1.0031-0.1839j), (1.0031-0.1839j), (...                0.048220   \n4  [(1+0j), (0.9768-0.09j), (0.9768-0.09j), (1+0j...                0.060897   \n\n   Transmission Coefficient  EMI Shielding Effectiveness  Absorption  \n0                  0.103852                     9.835843    0.543898  \n1                  0.080937                    10.918514    0.756344  \n2                  0.087909                    10.559687    0.758675  \n3                  0.072769                    11.380541    0.879011  \n4                  0.083223                    10.797541    0.855879  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Frequency</th>\n      <th>Material IDs</th>\n      <th>Thickness</th>\n      <th>Epsilon</th>\n      <th>Mu</th>\n      <th>Reflection Coefficient</th>\n      <th>Transmission Coefficient</th>\n      <th>EMI Shielding Effectiveness</th>\n      <th>Absorption</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.000000e+09</td>\n      <td>[0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]</td>\n      <td>[0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...</td>\n      <td>[(1+0j), (3.3595-0.03338j), (3.3595-0.03338j),...</td>\n      <td>[(1+0j), (0.883-0.0324j), (0.883-0.0324j), (1+...</td>\n      <td>0.352250</td>\n      <td>0.103852</td>\n      <td>9.835843</td>\n      <td>0.543898</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.000000e+09</td>\n      <td>[0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]</td>\n      <td>[0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...</td>\n      <td>[(1+0j), (3.1533-0.3044j), (3.1533-0.3044j), (...</td>\n      <td>[(1+0j), (1.2109-0.1297j), (1.2109-0.1297j), (...</td>\n      <td>0.162719</td>\n      <td>0.080937</td>\n      <td>10.918514</td>\n      <td>0.756344</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.000000e+10</td>\n      <td>[0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]</td>\n      <td>[0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...</td>\n      <td>[(1+0j), (3.1652-0.3126j), (3.1652-0.3126j), (...</td>\n      <td>[(1+0j), (1.0601-0.0698j), (1.0601-0.0698j), (...</td>\n      <td>0.153416</td>\n      <td>0.087909</td>\n      <td>10.559687</td>\n      <td>0.758675</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.100000e+10</td>\n      <td>[0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]</td>\n      <td>[0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...</td>\n      <td>[(1+0j), (3.1588-0.2425j), (3.1588-0.2425j), (...</td>\n      <td>[(1+0j), (1.0031-0.1839j), (1.0031-0.1839j), (...</td>\n      <td>0.048220</td>\n      <td>0.072769</td>\n      <td>11.380541</td>\n      <td>0.879011</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.200000e+10</td>\n      <td>[0, 3.0, 3.0, 0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 0]</td>\n      <td>[0.0, 0.0005, 0.0005, 0.0, 0.0005, 0.0005, 0.0...</td>\n      <td>[(1+0j), (3.1563-0.3053j), (3.1563-0.3053j), (...</td>\n      <td>[(1+0j), (0.9768-0.09j), (0.9768-0.09j), (1+0j...</td>\n      <td>0.060897</td>\n      <td>0.083223</td>\n      <td>10.797541</td>\n      <td>0.855879</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"filtered_df.to_csv('new_combinations.csv', encoding='utf-8')","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:53:21.414682Z","iopub.execute_input":"2024-06-11T11:53:21.415109Z","iopub.status.idle":"2024-06-11T11:53:21.433452Z","shell.execute_reply.started":"2024-06-11T11:53:21.415075Z","shell.execute_reply":"2024-06-11T11:53:21.432266Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.histplot(filtered_df['Absorption'], bins=20, kde=True)\nplt.title('Histogram of Absorption Values')\nplt.xlabel('Absorption')\nplt.ylabel('Number of Samples')\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-11T11:53:21.436718Z","iopub.execute_input":"2024-06-11T11:53:21.437169Z","iopub.status.idle":"2024-06-11T11:53:21.829024Z","shell.execute_reply.started":"2024-06-11T11:53:21.437131Z","shell.execute_reply":"2024-06-11T11:53:21.827798Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA1cAAAIjCAYAAADvBuGTAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABsr0lEQVR4nO3deXwTdeL/8XeSpmlLaTkKlAJyKpdSEBZEEFDL6QF7KJeKLIoHrEJd+IkHl64oiuCB4gEifkE8VnFV5BA5VK4FBIVFBAQRCgW5Sq80Teb3R2kg9CCBCUnh9Xw88kjmM5+ZfCafDNM3M/OJxTAMQwAAAACA82INdQMAAAAA4GJAuAIAAAAAExCuAAAAAMAEhCsAAAAAMAHhCgAAAABMQLgCAAAAABMQrgAAAADABIQrAAAAADAB4QoAAAAATEC4AgCT1KlTR3fffXeom3HRe/7551WvXj3ZbDY1b97clHXOnDlTFotF69atM2V94cJisWjs2LGhbsZ5W7ZsmSwWi5YtWxbqpgBAqQhXAFCMs/2x3alTJ1155ZXn/T7z58+/KP74vVAWLVqkkSNHql27dnrnnXf0zDPP+LXc7bffLovFov/3//5fkFt44YXbd6hZs2a67LLLZBhGiXXatWunatWqKT8//wK2DACCj3AFACbZtm2b3nrrrYCWmT9/vsaNGxekFl18vvnmG1mtVk2fPl133XWXevTocdZlMjIy9Pnnn6tOnTp6//33S/2jvywq7TuUk5OjJ5544oK2p3///vr999/17bffFjt/9+7dWrVqlXr37q2IiIgL2jYACDbCFQCYxOFwyG63h7oZAcnKygp1EwJy8OBBRUdHKzIy0u9l/v3vf8vtdmvGjBn6/ffftWLFiiC28Px4PB7l5uaatr6oqKgLHmD69esni8WiOXPmFDu/MOD279//grYLAC4EwhUAmOTMe65cLpfGjRunyy+/XFFRUapcubLat2+vxYsXS5LuvvtuTZ06VVLBvTGFj0JZWVl65JFHVKtWLTkcDjVs2FAvvPBCkTMvOTk5euihh5SQkKDy5cvr1ltv1b59+4rcbzN27FhZLBb973//U79+/VSxYkW1b99ekvTjjz/q7rvvVr169RQVFaXExET9/e9/1+HDh33eq3Adv/zyi+644w7Fx8erSpUqevLJJ2UYhn7//Xf17NlTcXFxSkxM1KRJk/z67PLz8/XUU0+pfv36cjgcqlOnjh577DE5nU5vHYvFonfeeUdZWVnez2rmzJlnXffs2bPVuXNnXX/99WrcuLFmz55dYt3s7Gzdd999qly5suLi4nTXXXfp6NGjPnXWrVunrl27KiEhQdHR0apbt67+/ve/+9Txt+8sFouGDh2q2bNnq2nTpnI4HFqwYIF2794ti8WiF154QZMnT1bt2rUVHR2tjh07avPmzd7lz/YdKu6eqx9++EHdu3dXXFycYmNjdeONN2r16tU+dQovi/3++++VmpqqKlWqqFy5cvrzn/+sQ4cOlfp516pVSx06dNDHH38sl8tVZP6cOXNUv359tWnTRr/99psefPBBNWzYUNHR0apcubJuu+027d69u9T3kEq+x7FTp07q1KmTT5nT6dSYMWPUoEEDORwO1apVSyNHjvT5fknS4sWL1b59e1WoUEGxsbFq2LChHnvssbO2BQAKcT4eAEpx/Phx/fHHH0XKi/uj8Uxjx47VhAkTdM8996h169bKyMjQunXrtGHDBnXu3Fn33Xef0tLStHjxYr333ns+yxqGoVtvvVVLly7VoEGD1Lx5cy1cuFAjRozQvn37NHnyZG/du+++Wx9++KHuvPNOXXPNNVq+fLluuummEtt122236fLLL9czzzzj/WN/8eLF+vXXXzVw4EAlJiZqy5YtevPNN7VlyxatXr3a5w92Serdu7caN26sZ599Vl9++aWefvppVapUSW+88YZuuOEGPffcc5o9e7b++c9/6k9/+pM6dOhQ6md1zz336N1339Xf/vY3PfLII1qzZo0mTJigrVu36tNPP5Ukvffee3rzzTe1du1avf3225Kka6+9ttT1pqWlaenSpXr33XclSX379tXkyZP16quvFnv2a+jQoapQoYLGjh2rbdu26fXXX9dvv/3mHVDh4MGD6tKli6pUqaJHH31UFSpU0O7du/XJJ5941xFI30kFlzp++OGHGjp0qBISElSnTh3vvFmzZunEiRMaMmSIcnNz9dJLL+mGG27QTz/9pGrVqpX6HSrOli1bdN111ykuLk4jR46U3W7XG2+8oU6dOmn58uVq06aNT/1//OMfqlixosaMGaPdu3drypQpGjp0qD744INS36d///4aPHiwFi5cqJtvvtlb/tNPP2nz5s0aPXq0JOm///2vVq5cqT59+qhm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837++WdZrVZv0DCDw+HQ3/72N82aNUvp6en66KOPdMMNNygxMdFb5+OPP9aAAQN8RpXMzc3VsWPHzrr+ihUrFlvvt99+87nssX79+tq0aZNuvPHGs35WVqtVN954o2688Ua9+OKLeuaZZ/T4449r6dKlSklJOftGA7jkcVkgAATJmcOYx8bGqkGDBj6XkJUrV06SivyR2KNHD7ndbr366qs+5ZMnT5bFYlH37t0lSV27dpUkvfbaaz71XnnlFb/bWfg/8meejZgyZYrf6zgfhcHlzPcrPNNQ2siHJfn++++1e/duDRw4UH/729+KPHr37q2lS5cqLS3NZ7k333zT516q119/Xfn5+d7P++jRo0U+p+bNm0uSt1/97Tt/zJs3T/v27fNOr127VmvWrPFZR0nfoTPZbDZ16dJFn332mc9lhenp6ZozZ47at2+vuLg4v9vmj/79+8vlcum+++7ToUOHivy2lc1mK/J5vvLKK3K73Wddd/369bV69Wrl5eV5y7744osilzbefvvt2rdvX7E/8J2Tk+O9J+zIkSNF5p/ZtwBwNpy5AoAgadKkiTp16qSWLVuqUqVKWrdunT7++GMNHTrUW6dly5aSpIceekhdu3b1XjZ1yy236Prrr9fjjz+u3bt3Kzk5WYsWLdJnn32mYcOGqX79+t7l//rXv2rKlCk6fPiwdyj2X375RZJ/ZzXi4uLUoUMHTZw4US6XSzVq1NCiRYu0a9euIHwqRSUnJ2vAgAF68803dezYMXXs2FFr167Vu+++q169evmcSfLX7NmzZbPZSgxmt956qx5//HHNnTvXZyCNvLw83Xjjjbr99tu1bds2vfbaa2rfvr1uvfVWSdK7776r1157TX/+859Vv359nThxQm+99Zbi4uK8IdHfvvNHgwYN1L59ez3wwANyOp2aMmWKKleurJEjR3rrlPQdKs7TTz/t/S2nBx98UBEREXrjjTfkdDo1ceJEv9vlr44dO6pmzZr67LPPFB0drb/85S8+82+++Wa99957io+PV5MmTbRq1Sp9/fXXqly58lnXfc899+jjjz9Wt27ddPvtt2vnzp36v//7vyKf75133qkPP/xQ999/v5YuXap27drJ7Xbr559/1ocffqiFCxeqVatWGj9+vFasWKGbbrpJtWvX1sGDB/Xaa6+pZs2a3t+DA4CzCtUwhQAQzgqH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BwAAAADMFtIzV0OGDNGcOXP02WefqXz58t57ouLj4xUdHS1Juuuuu1SjRg1NmDBBkvTwww+rY8eOmjRpkm666SbNnTtX69at05tvvilJslgsGjZsmJ5++mldfvnlqlu3rp588kklJSWpV69eIdlOAAAAABe/kIar119/XZLUqVMnn/J33nlHd999tyRpz549PqMLXXvttZozZ46eeOIJPfbYY7r88ss1b948n0EwRo4cqaysLA0ePFjHjh1T+/bttWDBAkVFRQV9mwAAAABcmkIargzj7He2Llu2rEjZbbfdpttuu63EZSwWi8aPH6/x48efT/MAAAAAwG8hvecKAAAAAC4WhCsAAAAAMAHhCgAAAABMQLgCAAAAABMQrgAAAADABIQrAAAAADAB4QoAAAAATEC4AgAAAAATEK4AAAAAwASEKwAAAAAwAeEKAAAAAExAuAIAAAAAExCuAAAAAMAEhCsAAAAAMAHhCgAAAABMQLgCAAAAABMQrgAAAADABIQrAAAAADAB4QoAAAAATEC4AgAAAAATEK4AAAAAwASEKwAAAAAwAeEKAAAAAExAuAIAAAAAExCuAAAAAMAEhCsAAAAAMAHhCgAAAABMQLgCAAAAABMQrgAAAADABIQrAAAAADAB4QoAAAAATEC4AgAAAAATEK4AAAAAwASEKwAAAAAwAeEKAAAAAExAuAIAAAAAExCuAAAAAMAEhCsAAAAAMAHhCgAAAABMQLgCAAAAABMQrgAAAADABIQrAAAAADAB4QoAAAAATEC4AgAAAAAThDRcrVixQrfccouSkpJksVg0b968UuvffffdslgsRR5Nmzb11hk7dmyR+Y0aNQrylgAAAAC41IU0XGVlZSk5OVlTp071q/5LL72k/fv3ex+///67KlWqpNtuu82nXtOmTX3qfffdd8FoPgAAAAB4RYTyzbt3767u3bv7XT8+Pl7x8fHe6Xnz5uno0aMaOHCgT72IiAglJiaa1k4AAAAAOJuQhqvzNX36dKWkpKh27do+5du3b1dSUpKioqLUtm1bTZgwQZdddlmJ63E6nXI6nd7pjIwMSZLL5ZLL5QpO44OosM1lse2XCvoo/NFH4Y8+Ch2Px6Po6GjZLJLFcJdat3D+2eqdK5tFio6Olsfj4btwjtiXwh99FFqBfO4WwzCMILbFbxaLRZ9++ql69erlV/20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0wIeit1MK1as0C233KKkpCRZLBbNmzev1PqffPKJOnfurCpVqiguLk5t27bVwoULfeqMHTtWFovF59GoUaMgbgUAAAAAnGO4WrJkiW6++WbVr19f9evX180336yvv/464PVkZWUpOTlZU6dO9av+ihUr1LlzZ82fP1/r16/X9ddfr1tuuUU//PCDT72mTZtq//793sd3330XcNsAAAAAIBABjxb42muv6eGHH9bf/vY3Pfzww5Kk1atXq0ePHpo8ebKGDBni97q6d++u7t27+13/9B8vlqRnnnlGn332mT7//HO1aNHCWx4REaHExES/1wsAAAAA5yvgcPXMM89o8uTJGjp0qLfsoYceUrt27fTMM88EFK7Ol8fj0YkTJ1SpUiWf8u3btyspKUlRUVFq27atJkyYoMsuu6zE9TidTjmdTu90RkaGJMnlcsnlcgWn8UFU2Oay2PZLBX0U/uij8EcfhY7H41F0dLRsFslilD6QVeH8s9U7VzaLFB0dLY/Hw3fhHLEvhT/6KLQC+dwthmEYgaw8NjZWGzduVIMGDXzKt2/frhYtWigzMzOQ1Z1qiMWiTz/91O+RCSVp4sSJevbZZ/Xzzz+ratWqkqSvvvpKmZmZatiwofbv369x48Zp37592rx5s8qXL1/sesaOHatx48YVKZ8zZ45iYmLOaXsAAAAAlH3Z2dnq16+fjh8/rri4uFLrBhyu+vXrpxYtWmjEiBE+5S+88ILWrVunuXPnBt5iBR6u5syZo3vvvVefffaZUlJSSqx37Ngx1a5dWy+++KIGDRpUbJ3izlzVqlVLf/zxx1k/wHDkcrm0ePFide7cWXa7PdTNQTHoo/BHH4U/+ih0Nm3apA4dOmjopNlKql/6oFEWw606uTu1O6q+DIvN9Lak7fxZrz7SXytWrFBycrLp678UsC+FP/ootDIyMpSQkOBXuAr4ssAmTZroX//6l5YtW6a2bdtKKrjn6vvvv9cjjzyil19+2Vv3oYceCnT1fpk7d67uueceffTRR6UGK0mqUKGCrrjiCu3YsaPEOg6HQw6Ho0i53W4v01/gst7+SwF9FP7oo/BHH114VqtVOTk5chvyOzAZFltQwpXbkHJycmS1WvkenCf2pfBHH4VGIJ95wOFq+vTpqlixov73v//pf//7n7e8QoUKmj59unfaYrEEJVy9//77+vvf/665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ulUPPPCAsrKyvKMHAgAAAEAwBDzcyB133KHp06eb8ubr1q1TixYt1KJFwTWdqampatGihUaPHi2p4Ka9wqAlSXXr1tWXX36pxYsXKzk5WZMmTdLbb7/tHYZdknr37q0XXnhBo0ePVvPmzbVx40YtWLCgyCAXAAAAAGCmgO+5ys/P14wZM/T111+rZcuWKleunM/8F1980e91derUSYZR8l15M2fOLHaZH374odT1Dh06VEOHDvW7HQAAAABwvgIOV5s3b9bVV18tSfrlF9/hVy0WizmtAgAAAIAyJuBwtXTp0mC0AwAAAADKtHP+iecdO3Zo4cKFysnJkaRSL+8DAAAAgItdwOHq8OHDuvHGG3XFFVeoR48e3l+KHjRokB555BHTGwgAAAAAZUHA4Wr48OGy2+3as2ePYmJivOW9e/fWggULTG0cAAAAAJQVAd9ztWjRIi1cuFA1a9b0Kb/88sv122+/mdYwAAAAAChLAj5zlZWV5XPGqtCRI0fkcDhMaRQAAAAAlDUBh6vrrrtOs2bN8k5bLBZ5PB5NnDhR119/vamNAwAAAICyIuDLAidOnKgbb7xR69atU15enkaOHKktW7boyJEj+v7774PRRgAAAAAIewGfubryyiv1yy+/qH379urZs6eysrL0l7/8RT/88IPq168fjDYCAAAAQNgL+MyVJMXHx+vxxx83uy0AAAAAUGadU7g6evSopk+frq1bt0qSmjRpooEDB6pSpUqmNg4AAAAAyoqALwtcsWKF6tSpo5dffllHjx7V0aNH9fLLL6tu3bpasWJFMNoIAAAAAGEv4DNXQ4YMUe/evfX666/LZrNJktxutx588EENGTJEP/30k+mNBAAAAIBwF/CZqx07duiRRx7xBitJstlsSk1N1Y4dO0xtHAAAAACUFQGHq6uvvtp7r9Xptm7dquTkZFMaBQAAAABljV+XBf7444/e1w899JAefvhh7dixQ9dcc40kafXq1Zo6daqeffbZ4LQSAAAAAMKcX+GqefPmslgsMgzDWzZy5Mgi9fr166fevXub1zoAAAAAKCP8Cle7du0KdjsAAAAAoEzzK1zVrl072O0AAAAAgDLtnH5EOC0tTd99950OHjwoj8fjM++hhx4ypWEAAAAAUJYEHK5mzpyp++67T5GRkapcubIsFot3nsViIVwBAAAAuCQFHK6efPJJ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//3367HHHjvndaJkwegjieNROCFcXYTatm2rtm3beqevvfZaNW7cWG+88YaeeuopSVKfPn2886+66io1a9ZM9evX17Jly3TjjTde8DZfajwej6pWrao333xTNptNLVu21L59+/T88897/3BHaPnTR927d/fWb9asmdq0aaPatWvrww8/1KBBg0LV9EvS9OnTddVVV6l169ahbgpKUFIfcTwKrWXLlumZZ57Ra6+9pjZt2mjHjh16+OGH9dRTT+nJJ58MdfMg//qI41H4IFyFuYSEBNlsNqWnp/uUp6enKzEx0a912O12tWjRQjt27CixTr169ZSQkKAdO3ZwMAvQufRR9erVZbfbff5XtnHjxjpw4IDy8vJM6XecEow+ioyMLLJMhQoVdMUVV5S6r6F45/Odz8rK0ty5czV+/Hif8sLl0tPTVb16dZ91Nm/e3JyGX0KC0UfF4Xh07s6lj5588kndeeeduueeeyQVBNysrCwNHjxYjz/+OMcjkwWjj6zWonf5cDwKHe65CnORkZFq2bKllixZ4i3zeDxasmSJz9mp0rjdbv30008+f1ycae/evTp8+HCpdVC8c+mjdu3aaceOHfJ4PN6yX375RdWrV1dkZKQp/Y5TgtFHxcnMzNTOnTvZj87B+XznP/roIzmdTt1xxx0+5XXr1lViYqLPOjMyMrRmzRr2o3MQjD4qDsejc3cufZSdnV3kj/PC/1QyDIPjkcmC0UfF4XgUQqEdTwP+mDt3ruFwOIyZM2ca//vf/4zBgwcbFSpU8A6vfueddxqPPvqot/64ceOMhQsXGjt37jTWr19v9OnTx4iKijK2bNliGIZhnDhxwvjnP/9prFq1yti1a5fx9ddfG1dffbVx+eWXG7m5uSHZxrIu0D7as2ePUb58eWPo0KHGtm3bjC+++MKoWrWq8fTTT/u9TgQmGH30yCOPGMuWLTN27dplfP/990ZKSoqRkJBgHDx48IJv38Ug0D4q1L59e6N3797FrvPZZ581KlSoYHz22WfGjz/+aPTs2ZOh2M+D2X3E8ch8gfbRmDFjjPLlyxvvv/++8euvvxqLFi0y6tevb9x+++1+rxOBCUYfcTwKH4SrMuKVV14xLrvsMiMyMtJo3bq1sXr1au+8jh07GgMGDPBODxs2zFu3WrVqRo8ePYwNGzZ452dnZxtdunQxqlSpYtjtdqN27drGvffeyz+S5ymQPjIMw1i5cqXRpk0bw+FwGPXq1TP+9a9/Gfn5+X6vE4Ezu4969+5tVK9e3YiMjDRq1Khh9O7d29ixY8eF2pyLUqB99PPPPxuSjEWLFhW7Po/HYzz55JNGtWrVDIfDYdx4443Gtm3bgrkJFz0z+4jjUXAE0kcul8sYO3asUb9+fSMqKsqoVauW8eCDDxpHjx71e50InNl9xPEofFgMo4TziQAAAAAAv3HPFQAAAACYgHAFAAAAACYgXAEAAACACQhXAAAAAGACwhUAAAAAmIBwBQAAAAAmIFwBAAAAgAkIVwAAAABgAsIVAKDMWLZsmSwWi44dOxbqpvjt7rvvVq9evULdDADABUC4AgCEnVWrVslms+mmm24KdVP8tnv3blksFm3cuNGn/KWXXtLMmTND0iYAwIVFuAIAhJ3p06frH//4h1asWKG0tLSQtiUvL++8lo+Pj1eFChXMaQwAIKwRrgAAYSUzM1MffPCBHnjgAd10003FnvX5/vvv1axZM0VFRemaa67R5s2bvfN+++033XLLLapYsaLKlSunpk2bav78+d75y5cvV+vWreVwOFS9enU9+uijys/P987v1KmThg4dqmHDhikhIUFdu3aVJFksFr3++uvq3r27oqOjVa9ePX388cfe5erWrStJatGihSwWizp16iSp6GWBTqdTDz30kKpWraqoqCi1b99e//3vf73zCy99XLJkiVq1aqWYmBhde+212rZt23l9rgCA4CNcAQDCyocffqhGjRqpYcOGuuOOOzRjxgwZhuFTZ8SIEZo0aZL++9//qkqVKrrlllvkcrkkSUOGDJHT6dSKFSv0008/6bnnnlNsbKwkad++ferRo4f+9Kc/adOmTXr99dc1ffp0Pf300z7rf/fddxUZGanvv/9e06ZN85Y/+eST+utf/6pNmzapf//+6tOnj7Zu3SpJWrt2rSTp66+/1v79+/XJJ58Uu30jR47Uv//9b7377rvasGGDGjRooK5du+rIkSM+9R5//HFNmjRJ69atU0REhP7+97+fx6cKALggDAAAwsi1115rTJkyxTAMw3C5XEZCQoKxdOlSwzAMY+nSpYYkY+7cud76hw8fNqKjo40PPvjAMAzDuOqqq4yxY8cWu+7HHnvMaNiwoeHxeLxlU6dONWJjYw23220YhmF07NjRaNGiRZFlJRn333+/T1mbNm2MBx54wDAMw9i1a5chyfjhhx986gwYMMDo2bOnYRiGkZmZadjtdmP27Nne+Xl5eUZSUpIxceJEn238+uuvvXW+/PJLQ5KRk5NT/IcGAAgLnLkCAISNbdu2ae3aterbt68kKSIiQr1799b06dN96rVt29b7ulKlSmrYsKH3DNJDDz2kp59+Wu3atdOYMWP0448/eutu3bpVbdu2lcVi8Za1a9dOmZmZ2rt3r7esZcuWxbbv9PctnC58X3/s3LlTLpdL7dq185bZ7Xa1bt26yHqaNWvmfV29enVJ0sGDB/1+LwDAhUe4AgCEjenTpys/P19JSUmKiIhQRESEXn/9df373//W8ePH/VrHPffco19//VV33nmnfvrpJ7Vq1UqvvPJKQO0oV67cuTTfVHa73fu6MAx6PJ5QNQcA4AfCFQAgLOTn52vWrFmaNGmSNm7c6H1s2rRJSUlJev/99711V69e7X199OhR/fLLL2rcuLG3rFatWrr//vv1ySef6JFHHtFbb70lSWrcuLFWrVrlcw/X999/r/Lly6tmzZpnbePp71s4Xfi+kZGRkiS3213i8vXr1/fey1XI5XLpv//9r5o0aXLW9wcAhLeIUDcAAABJ+uKLL3T06FENGjRI8fHxPvP++te/avr06Xr++eclSePHj1flypVVrVo1Pf7440pISPCOyDds2DB1795dV1xxhY4ePaqlS5d6A9CDDz6oKVOm6B//+IeGDh2qbdu2acyYMUpNTZXVevb/b/zoo4/UqlUrtW/fXrNnz9batWu9lyxWrVpV0dHRWrBggWrWrKmoqKgi21GuXDk98MADGjFihCpVqqTLLrtMEydOVHZ2tgYNGnS+HyEAIMQ4cwUACAvTp09XSkpKkUAiFYSrdevWee+fevbZZ/Xwww+rZcuWOnDggD7//HOfM0dDhgxR48aN1a1bN11xxRV67bXXJEk1atTQ/PnztXbtWiUnJ+v+++/XoEGD9MQTT/jVxnHjxmnu3Llq1qyZZs2apffff997xikiIkIvv/yy3njjDSUlJalnz57FruPZZ5/VX//6V9155526+uqrtWPHDi1cuFAVK1YM+DMDAIQXi2GcMb4tAAAowmKx6NNPP/X5zSoAAE7HmSsAAAAAMAHhCgAAAABMwIAWAAD4gavoAQBnw5krAAAAADAB4QoAAAAATEC4AgAAAAATEK4AAAAAwASEKwAAAAAwAeEKAAAAAExAuAIAAAAAExCuAAAAAMAE/x+FNnscModuIgAAAABJRU5ErkJggg=="},"metadata":{}}]}]}