{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8024929,"sourceType":"datasetVersion","datasetId":4729219}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport seaborn as sns\nimport cmath\nimport math\nimport time\nimport matplotlib.pyplot as plt \nimport re\nfrom numba import jit\nimport random\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-23T06:58:51.374223Z","iopub.execute_input":"2024-06-23T06:58:51.375366Z","iopub.status.idle":"2024-06-23T06:58:51.387937Z","shell.execute_reply.started":"2024-06-23T06:58:51.375326Z","shell.execute_reply":"2024-06-23T06:58:51.386737Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/new-dielectric2/dielectric_restructured_2.csv')\ndf[['epsilon_real', 'epsilon_imag']] = df['Epsilon'].str.strip('()j').str.split('+', expand=True).astype(float)\nmu_values = df['Mu'].apply(lambda x: re.findall(r'[-+]?\\d*\\.\\d+|\\d+', x))\ndf[['mu_real', 'mu_imag']] = pd.DataFrame(mu_values.tolist(), dtype=float)\ndf[['mu_real', 'mu_imag']] = df[['mu_real', 'mu_imag']].astype(float)\ndf['mu_imag'] = -1 * df['mu_imag']\ndf['epsilon_imag'] = -1 * df['epsilon_imag']\ndf.drop(['Epsilon'], axis=1, inplace=True)\ndf.drop(['Mu'], axis=1, inplace=True)\n\ndf['Thickness(m)'] = df['Thickness(mm)'] / 1e3\ndf['Thickness(m)'] = df['Thickness(m)'].clip(0.00005, 0.0005).round(6)  # Ensure thickness is within the desired range\ndf.drop(['Thickness(mm)'], axis=1, inplace=True)\n\ndf['Frequency'] = df['Frequency(GHz)'] * 1e9\ndf.drop(['Frequency(GHz)'], axis=1, inplace=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-06-23T06:58:53.811878Z","iopub.execute_input":"2024-06-23T06:58:53.812297Z","iopub.status.idle":"2024-06-23T06:58:53.858536Z","shell.execute_reply.started":"2024-06-23T06:58:53.812250Z","shell.execute_reply":"2024-06-23T06:58:53.857371Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"      S.No.  Material ID  epsilon_real  epsilon_imag  mu_real  mu_imag  \\\n0         1            1      320.6301     -495.4431   1.0000    -0.00   \n1         2            1      320.6301     -495.4431   1.0000    -0.00   \n2         3            1      320.6301     -495.4431   1.0000    -0.00   \n3         4            1      320.6301     -495.4431   1.0000    -0.00   \n4         5            1      320.6301     -495.4431   1.0000    -0.00   \n...     ...          ...           ...           ...      ...      ...   \n1495   1496            3        3.1563       -0.3053   0.9768    -0.09   \n1496   1497            3        3.1563       -0.3053   0.9768    -0.09   \n1497   1498            3        3.1563       -0.3053   0.9768    -0.09   \n1498   1499            3        3.1563       -0.3053   0.9768    -0.09   \n1499   1500            3        3.1563       -0.3053   0.9768    -0.09   \n\n      Thickness(m)     Frequency  \n0          0.00005  8.000000e+09  \n1          0.00010  8.000000e+09  \n2          0.00015  8.000000e+09  \n3          0.00020  8.000000e+09  \n4          0.00025  8.000000e+09  \n...            ...           ...  \n1495       0.00050  1.200000e+10  \n1496       0.00050  1.200000e+10  \n1497       0.00050  1.200000e+10  \n1498       0.00050  1.200000e+10  \n1499       0.00050  1.200000e+10  \n\n[1500 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>S.No.</th>\n      <th>Material ID</th>\n      <th>epsilon_real</th>\n      <th>epsilon_imag</th>\n      <th>mu_real</th>\n      <th>mu_imag</th>\n      <th>Thickness(m)</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00005</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00010</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00015</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00020</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00025</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1495</th>\n      <td>1496</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1496</th>\n      <td>1497</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1497</th>\n      <td>1498</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1498</th>\n      <td>1499</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1499</th>\n      <td>1500</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n  </tbody>\n</table>\n<p>1500 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Genetic Algorithm Parameters\npopulation_size = 5000\nnum_generations = 100\ncrossover_rate = 0.8\nmutation_rate = 0.2\nnum_layers = 7\n\n# Air properties (Assuming you have these variables defined)\nair_id = 0\nair_thickness = 0\nair_eps = 1+0j\nair_mu = 1+0j\n\n# Frequencies\nfrequencies = [8e9, 9e9, 10e9, 11e9, 12e9]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_air = pd.DataFrame({\n    'Material ID': [air_id] * len(frequencies),\n    'Frequency': frequencies,\n    'epsilon_real': [air_eps.real] * len(frequencies),\n    'epsilon_imag': [air_eps.imag] * len(frequencies),\n    'mu_real': [air_mu.real] * len(frequencies),\n    'mu_imag': [air_mu.imag] * len(frequencies),\n    'Thickness(m)': [air_thickness] * len(frequencies)\n})\n\n# Append the air layer to the dataframe\ndf = pd.concat([df, df_air], ignore_index=True)\n\n# Create a dictionary for frequency-specific properties\nmaterial_properties = {}\nfor _, row in df.iterrows():\n    material_id = row['Material ID']\n    frequency = row['Frequency']\n    if material_id not in material_properties:\n        material_properties[material_id] = {}\n    material_properties[material_id][frequency] = {\n        'epsilon': row['epsilon_real'] + 1j * row['epsilon_imag'],\n        'mu': row['mu_real'] + 1j * row['mu_imag'],\n        'thickness': row['Thickness(m)']\n    }\n\n# Print the material properties dictionary for inspection\nprint(\"\\nMaterial properties dictionary:\")\nfor material_id, props in material_properties.items():\n    print(f\"Material ID: {material_id}\")\n    for freq, values in props.items():\n        print(f\"  Frequency: {freq}, Properties: {values}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-23T06:59:38.055424Z","iopub.execute_input":"2024-06-23T06:59:38.055851Z","iopub.status.idle":"2024-06-23T06:59:38.179538Z","shell.execute_reply.started":"2024-06-23T06:59:38.055818Z","shell.execute_reply":"2024-06-23T06:59:38.178374Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"\nMaterial properties dictionary:\nMaterial ID: 1.0\n  Frequency: 8000000000.0, Properties: {'epsilon': (320.6301-495.4431j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 9000000000.0, Properties: {'epsilon': (226.6058-364.7021j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 10000000000.0, Properties: {'epsilon': (275.9141-358.4064j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 11000000000.0, Properties: {'epsilon': (260.8633-335.7823j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 12000000000.0, Properties: {'epsilon': (234.7425-311.4114j), 'mu': (1+0j), 'thickness': 0.0005}\nMaterial ID: 2.0\n  Frequency: 8000000000.0, Properties: {'epsilon': (44.0257-58.6855j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 9000000000.0, Properties: {'epsilon': (41.112-57.0349j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 10000000000.0, Properties: {'epsilon': (37.5967-54.2959j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 11000000000.0, Properties: {'epsilon': (34.0151-51.1122j), 'mu': (1+0j), 'thickness': 0.0005}\n  Frequency: 12000000000.0, Properties: {'epsilon': (32.2393-47.5891j), 'mu': (1+0j), 'thickness': 0.0005}\nMaterial ID: 3.0\n  Frequency: 8000000000.0, Properties: {'epsilon': (3.3595-0.03338j), 'mu': (0.883-0.0324j), 'thickness': 0.0005}\n  Frequency: 9000000000.0, Properties: {'epsilon': (3.1533-0.3044j), 'mu': (1.2109-0.1297j), 'thickness': 0.0005}\n  Frequency: 10000000000.0, Properties: {'epsilon': (3.1652-0.3126j), 'mu': (1.0601-0.0698j), 'thickness': 0.0005}\n  Frequency: 11000000000.0, Properties: {'epsilon': (3.1588-0.2425j), 'mu': (1.0031-0.1839j), 'thickness': 0.0005}\n  Frequency: 12000000000.0, Properties: {'epsilon': (3.1563-0.3053j), 'mu': (0.9768-0.09j), 'thickness': 0.0005}\nMaterial ID: 0.0\n  Frequency: 8000000000.0, Properties: {'epsilon': (1+0j), 'mu': (1+0j), 'thickness': 0.0}\n  Frequency: 9000000000.0, Properties: {'epsilon': (1+0j), 'mu': (1+0j), 'thickness': 0.0}\n  Frequency: 10000000000.0, Properties: {'epsilon': (1+0j), 'mu': (1+0j), 'thickness': 0.0}\n  Frequency: 11000000000.0, Properties: {'epsilon': (1+0j), 'mu': (1+0j), 'thickness': 0.0}\n  Frequency: 12000000000.0, Properties: {'epsilon': (1+0j), 'mu': (1+0j), 'thickness': 0.0}\n","output_type":"stream"}]},{"cell_type":"code","source":"def tmm(f, d, eps, mu):\n    \n    c = 3e8  # Speed of light in m/s\n    \n    M_total = np.identity(2, dtype=complex)\n    \n    for i in range(0, len(eps)-1):\n        k = (2 * np.pi * f / c) * np.sqrt(eps[i] * mu[i])\n        \n        M_propagation = np.array([[np.exp(-1j * k * d[i]), 0], [0, np.exp(1j * k * d[i])]], dtype=complex)\n        \n        Z = np.sqrt(mu[i] / eps[i])\n        Z_next = np.sqrt(mu[i+1] / eps[i+1])\n        \n        R = (Z - Z_next) / (Z_next + Z)\n        T = (2 * Z) / (Z_next + Z)\n        \n        # Check if T is close to zero, and handle the division by zero case\n        #if np.abs(T) < 1e-6:\n            #M_boundary = 0.5 * np.array([[1 + (Z / Z_next), 1 - (Z / Z_next)], [1 - (Z / Z_next), 1 + (Z / Z_next)]], dtype=complex)\n        #else:\n        M_boundary = np.array([[1, R], [R, 1]], dtype=complex)\n        \n        #M_boundary_inv = np.linalg.inv(M_boundary)\n        \n        M_total = (1/T) * np.matmul(np.matmul(M_boundary, M_propagation), M_total)\n    \n    R1 = -1 * (M_total[1, 0] / M_total[1, 1])  #if abs(M_total[0, 0]) > 1e-6 else 1.0\n    T1 = (M_total[0,0] + (M_total[0,1]*R1)) #if abs(M_total[0, 0]) > 1e-6 else 0.0 \n    \n    R2 = np.abs(R1)**2\n    T2 = np.abs(T1)**2\n    return R2, T2\n\ndef calculate_shielding_effectiveness(R2,T2):\n    emi_se = 10*np.log10(1/(np.abs(T2)))\n    return emi_se\n\ndef calculate_absorption(R2,T2):\n    absorption = 1 - (R2 + T2)\n    return absorption\n\nf = 8e9\nd = [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0]\neps = [(1+0j), (44.0257-58.6855j), (3.3595-0.03338j), (320.6301-495.4431j), (44.0257-58.6855j), (3.3595-0.03338j), (1+0j)]\nmu = [(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0j), (0.883-0.0324j), (1+0j)]\n\n\nR, T = tmm(f, d, eps, mu)\nshielding_effectiveness = calculate_shielding_effectiveness(R,T)\nabsorption = calculate_absorption(R,T)\n\nprint(\"reflection:\", R)\nprint(\"transmission:\", T)\nprint(\"shielding effectiveness:\", shielding_effectiveness)\nprint(\"absorption:\", absorption)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T07:00:34.494729Z","iopub.execute_input":"2024-06-23T07:00:34.495140Z","iopub.status.idle":"2024-06-23T07:00:34.512843Z","shell.execute_reply.started":"2024-06-23T07:00:34.495108Z","shell.execute_reply":"2024-06-23T07:00:34.511560Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"reflection: 0.8107749943432702\ntransmission: 0.005069576408021708\nshielding effectiveness: 22.950283269278362\nabsorption: 0.1841554292487081\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_initial_population(material_properties, frequencies, population_size, num_layers):\n    population = []\n    for _ in range(population_size):\n        structure = [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness}]  # First layer is air\n        for _ in range(num_layers - 2):\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while len(structure) > 1 and structure[-1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = round(np.random.uniform(0.0001, 0.0005), 3)\n            structure.append({'Material ID': material_id, 'Frequency': random.choice(frequencies), 'Thickness': thickness})\n        structure.append({'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness})  # Last layer is air\n        population.append(structure)\n    return population","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def evaluate_fitness(structure, material_properties, frequencies):\n    total_absorption = 0\n    total_shielding = 0\n    valid = True\n    results = []\n    for f in frequencies:\n        d = round(np.random.uniform(0.0001, 0.0005), 3)\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        \n        R, T = tmm(f, d, eps, mu)\n        absorption = calculate_absorption(R, T)\n        shielding = calculate_shielding_effectiveness(R, T)\n        total_absorption += absorption\n        total_shielding += shielding\n        if absorption < 0.75:\n            valid = False\n            break\n        \n        results.append({\n            'Material IDs': [layer['Material ID'] for layer in structure],\n            'Frequency': f,\n            'Epsilon': eps,\n            'Mu': mu,\n            'Reflection Coefficient': R,\n            'Transmission Coefficient': T,\n            'EMI SE': shielding,\n            'Absorption': absorption\n        })\n    if not valid:\n        total_absorption = 0  # Set to 0 if invalid\n        total_shielding = 0  # Set to 0 if invalid\n    \n    print(f\"Structure: {structure}\")\n    print(f\"Total Absorption: {total_absorption}, Total Shielding: {total_shielding}, Valid: {valid}\")\n\n    return total_absorption, total_shielding, valid, results\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def select_parents(population, fitnesses, num_parents):\n    epsilon = 1e-6  # Small constant to prevent division by zero\n    fitnesses = [fitness + epsilon for fitness in fitnesses]\n    total_fitness = sum(fitnesses)\n    probabilities = [fitness / total_fitness for fitness in fitnesses]\n    parents = random.choices(population, weights=probabilities, k=num_parents)\n    return parents","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def crossover(parents, crossover_rate):\n    offspring = []\n    num_parents = len(parents)\n    for _ in range(num_parents // 2):\n        parent1 = random.choice(parents)\n        parent2 = random.choice(parents)\n        if random.random() < crossover_rate:\n            crossover_point = random.randint(1, len(parent1) - 2)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness}]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness}]\n            offspring.append(child1)\n            offspring.append(child2)\n        else:\n            offspring.append(parent1)\n            offspring.append(parent2)\n    return offspring","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def mutate(individual, mutation_rate):\n    if np.random.rand() < mutation_rate:\n        point = np.random.randint(1, len(individual)-1)\n        material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n        individual[point]['Material ID'] = material_id\n        individual[point]['Frequency'] = random.choice(frequencies)\n        individual[point]['Thickness'] = round(np.random.uniform(0.0001, 0.0005), 3)\n    return individual","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def genetic_algorithm(material_properties, frequencies, population_size, num_generations, crossover_rate, mutation_rate, num_layers):\n    population = generate_initial_population(material_properties, frequencies, population_size, num_layers)\n    all_results = []\n    for generation in range(num_generations):\n        fitnesses = []\n        generation_results = []\n        for individual in population:\n            total_absorption, total_shielding, valid, results = evaluate_fitness(individual, material_properties, frequencies)\n            if valid:\n                fitness = total_absorption + total_shielding\n                generation_results.extend(results)\n            else:\n                fitness = 0\n            fitnesses.append(fitness)\n        \n        new_population = []\n        while len(new_population) < population_size:\n            parents = select_parents(population, np.array(fitnesses), num_parents=2)\n            offspring = crossover(parents, crossover_rate)\n            offspring = [mutate(child, mutation_rate) for child in offspring]\n            new_population.extend(offspring)\n        \n        population = new_population[:population_size]  # Ensure population size remains constant\n        all_results.extend(generation_results)\n        print(f\"Generation {generation}: Max Fitness = {max(fitnesses)}\")\n    \n    return population, all_results","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_population, all_results = genetic_algorithm(material_properties, frequencies, population_size, num_generations, crossover_rate, mutation_rate, num_layers)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_df = pd.DataFrame(all_results)\nresults_df.to_csv('genetic_algorithm_results.csv', index=False)\n\n# Display the first few rows of the results\n\nresults_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}