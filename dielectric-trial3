{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8024929,"sourceType":"datasetVersion","datasetId":4729219}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport seaborn as sns\nimport cmath\nimport math\nimport time\nimport matplotlib.pyplot as plt \nimport re\nfrom numba import jit\nimport random\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-11T08:41:26.402721Z","iopub.execute_input":"2024-06-11T08:41:26.403832Z","iopub.status.idle":"2024-06-11T08:41:26.417809Z","shell.execute_reply.started":"2024-06-11T08:41:26.403789Z","shell.execute_reply":"2024-06-11T08:41:26.416395Z"},"trusted":true},"execution_count":314,"outputs":[{"name":"stdout","text":"/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/new-dielectric2/dielectric_restructured_2.csv')\ndf[['epsilon_real', 'epsilon_imag']] = df['Epsilon'].str.strip('()j').str.split('+', expand=True).astype(float)\nmu_values = df['Mu'].apply(lambda x: re.findall(r'[-+]?\\d*\\.\\d+|\\d+', x))\ndf[['mu_real', 'mu_imag']] = pd.DataFrame(mu_values.tolist(), dtype=float)\ndf[['mu_real', 'mu_imag']] = df[['mu_real', 'mu_imag']].astype(float)\ndf['mu_imag'] = -1 * df['mu_imag']\ndf['epsilon_imag'] = -1 * df['epsilon_imag']\ndf.drop(['Epsilon'], axis=1, inplace=True)\ndf.drop(['Mu'], axis=1, inplace=True)\n\ndf['Thickness(m)'] = df['Thickness(mm)'] / 1e3\ndf['Thickness(m)'] = df['Thickness(m)'].clip(0.00005, 0.003).round(6)  # Ensure thickness is within the desired range\ndf.drop(['Thickness(mm)'], axis=1, inplace=True)\n\ndf['Frequency'] = df['Frequency(GHz)'] * 1e9\ndf.drop(['Frequency(GHz)'], axis=1, inplace=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.420320Z","iopub.execute_input":"2024-06-11T08:41:26.420683Z","iopub.status.idle":"2024-06-11T08:41:26.480383Z","shell.execute_reply.started":"2024-06-11T08:41:26.420652Z","shell.execute_reply":"2024-06-11T08:41:26.479222Z"},"trusted":true},"execution_count":315,"outputs":[{"execution_count":315,"output_type":"execute_result","data":{"text/plain":"      S.No.  Material ID  epsilon_real  epsilon_imag  mu_real  mu_imag  \\\n0         1            1      320.6301     -495.4431   1.0000    -0.00   \n1         2            1      320.6301     -495.4431   1.0000    -0.00   \n2         3            1      320.6301     -495.4431   1.0000    -0.00   \n3         4            1      320.6301     -495.4431   1.0000    -0.00   \n4         5            1      320.6301     -495.4431   1.0000    -0.00   \n...     ...          ...           ...           ...      ...      ...   \n1495   1496            3        3.1563       -0.3053   0.9768    -0.09   \n1496   1497            3        3.1563       -0.3053   0.9768    -0.09   \n1497   1498            3        3.1563       -0.3053   0.9768    -0.09   \n1498   1499            3        3.1563       -0.3053   0.9768    -0.09   \n1499   1500            3        3.1563       -0.3053   0.9768    -0.09   \n\n      Thickness(m)     Frequency  \n0          0.00005  8.000000e+09  \n1          0.00010  8.000000e+09  \n2          0.00015  8.000000e+09  \n3          0.00020  8.000000e+09  \n4          0.00025  8.000000e+09  \n...            ...           ...  \n1495       0.00300  1.200000e+10  \n1496       0.00300  1.200000e+10  \n1497       0.00300  1.200000e+10  \n1498       0.00300  1.200000e+10  \n1499       0.00300  1.200000e+10  \n\n[1500 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>S.No.</th>\n      <th>Material ID</th>\n      <th>epsilon_real</th>\n      <th>epsilon_imag</th>\n      <th>mu_real</th>\n      <th>mu_imag</th>\n      <th>Thickness(m)</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00005</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00010</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00015</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00020</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00025</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1495</th>\n      <td>1496</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00300</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1496</th>\n      <td>1497</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00300</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1497</th>\n      <td>1498</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00300</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1498</th>\n      <td>1499</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00300</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1499</th>\n      <td>1500</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00300</td>\n      <td>1.200000e+10</td>\n    </tr>\n  </tbody>\n</table>\n<p>1500 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"frequencies = [8e9, 9e9, 10e9, 11e9, 12e9]\npopulation_size = 5000\nnum_layers = 7\nnum_generations = 100\ncrossover_rate = 0.6\nmutation_rate = 0.1","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.481968Z","iopub.execute_input":"2024-06-11T08:41:26.482425Z","iopub.status.idle":"2024-06-11T08:41:26.488803Z","shell.execute_reply.started":"2024-06-11T08:41:26.482369Z","shell.execute_reply":"2024-06-11T08:41:26.487610Z"},"trusted":true},"execution_count":316,"outputs":[]},{"cell_type":"code","source":"# Air properties\nair_id = 0\nair_eps = 1 + 0j\nair_mu = 1 + 0j\nair_thickness = 0  # Thickness of air layers\n\ndf_air = pd.DataFrame({\n    'Material ID': [air_id] * len(frequencies),\n    'Frequency': frequencies,\n    'epsilon_real': [air_eps.real] * len(frequencies),\n    'epsilon_imag': [air_eps.imag] * len(frequencies),\n    'mu_real': [air_mu.real] * len(frequencies),\n    'mu_imag': [air_mu.imag] * len(frequencies),\n    'Thickness(m)': [air_thickness] * len(frequencies)\n})\n\ndf = pd.concat([df, df_air], ignore_index=True)\n\n# Create a dictionary for frequency-specific properties\nmaterial_properties = {}\nfor _, row in df.iterrows():\n    material_id = row['Material ID']\n    frequency = row['Frequency']\n    if material_id not in material_properties:\n        material_properties[material_id] = {}\n    material_properties[material_id][frequency] = {\n        'epsilon': row['epsilon_real'] + 1j * row['epsilon_imag'],\n        'mu': row['mu_real'] + 1j * row['mu_imag'],\n        'thickness': row['Thickness(m)']\n    }","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.490391Z","iopub.execute_input":"2024-06-11T08:41:26.490877Z","iopub.status.idle":"2024-06-11T08:41:26.648133Z","shell.execute_reply.started":"2024-06-11T08:41:26.490838Z","shell.execute_reply":"2024-06-11T08:41:26.646941Z"},"trusted":true},"execution_count":317,"outputs":[]},{"cell_type":"code","source":"def tmm(f, d, eps, mu):\n    \n    c = 3e8  # Speed of light in m/s\n    \n    M_total = np.identity(2, dtype=complex)\n    \n    for i in range(0, len(eps)-1):\n        k = (2 * np.pi * f / c) * np.sqrt(eps[i] * mu[i])\n        \n        M_propagation = np.array([[np.exp(-1j * k * d[i]), 0], [0, np.exp(1j * k * d[i])]], dtype=complex)\n        \n        Z = np.sqrt(mu[i] / eps[i])\n        Z_next = np.sqrt(mu[i+1] / eps[i+1])\n        \n        R = (Z - Z_next) / (Z_next + Z)\n        T = (2 * Z) / (Z_next + Z)\n        \n        # Check if T is close to zero, and handle the division by zero case\n        #if np.abs(T) < 1e-6:\n            #M_boundary = 0.5 * np.array([[1 + (Z / Z_next), 1 - (Z / Z_next)], [1 - (Z / Z_next), 1 + (Z / Z_next)]], dtype=complex)\n        #else:\n        M_boundary = np.array([[1, R], [R, 1]], dtype=complex)\n        \n        #M_boundary_inv = np.linalg.inv(M_boundary)\n        \n        M_total = (1/T) * np.matmul(np.matmul(M_boundary, M_propagation), M_total)\n    \n    R1 = -1 * (M_total[1, 0] / M_total[1, 1])  #if abs(M_total[0, 0]) > 1e-6 else 1.0\n    T1 = (M_total[0,0] + (M_total[0,1]*R1)) #if abs(M_total[0, 0]) > 1e-6 else 0.0 \n    \n    R2 = np.abs(R1)**2\n    T2 = np.abs(T1)**2\n    return R2, T2\n\ndef calculate_shielding_effectiveness(R2,T2):\n    emi_se = 10*np.log10(1/(np.abs(T2)))\n    return emi_se\n\ndef calculate_absorption(R2,T2):\n    absorption = 1 - (R2 + T2)\n    return absorption\n\nf = 8e9\nd = [0, 0.00265, 0.0011, 0.0034, 0.0038, 0.00075, 0]\neps = [1+0j, 44.0257-58.6855j, 320.6301-495.4431j, 2.79-1.016j, 44.0257-58.6855j, 2.79-1.016j, 1+0j]\nmu = [1+0j, 1+0j, 1+0j, 1.0189-0.7357j, 1+0j, 1.0189-0.7357j, 1+0j]\n\n\nR, T = tmm(f, d, eps, mu)\nshielding_effectiveness = calculate_shielding_effectiveness(R,T)\nabsorption = calculate_absorption(R,T)\n\nprint(\"reflection:\", R)\nprint(\"transmission:\", T)\nprint(\"shielding effectiveness:\", shielding_effectiveness)\nprint(\"absorption:\", absorption)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.651793Z","iopub.execute_input":"2024-06-11T08:41:26.652168Z","iopub.status.idle":"2024-06-11T08:41:26.671603Z","shell.execute_reply.started":"2024-06-11T08:41:26.652136Z","shell.execute_reply":"2024-06-11T08:41:26.670407Z"},"trusted":true},"execution_count":318,"outputs":[{"name":"stdout","text":"reflection: 0.6681302162455586\ntransmission: 1.0724000206323102e-08\nshielding effectiveness: 79.69643186333602\nabsorption: 0.3318697730304412\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_initial_population(material_properties, frequencies, population_size, num_layers):\n    population = []\n    for _ in range(population_size):\n        structure = [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness}]  # First layer is air\n        for _ in range(num_layers - 2):\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while len(structure) > 1 and structure[-1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = round(np.random.uniform(0.0001, 0.0003), 6)\n            structure.append({'Material ID': material_id, 'Frequency': random.choice(frequencies), 'Thickness': thickness})\n        structure.append({'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness': air_thickness})  # Last layer is air\n        population.append(structure)\n    return population","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.672941Z","iopub.execute_input":"2024-06-11T08:41:26.673279Z","iopub.status.idle":"2024-06-11T08:41:26.688249Z","shell.execute_reply.started":"2024-06-11T08:41:26.673249Z","shell.execute_reply":"2024-06-11T08:41:26.687097Z"},"trusted":true},"execution_count":319,"outputs":[]},{"cell_type":"code","source":"def evaluate_fitness(structure, frequencies):\n    total_absorption = 0\n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        total_absorption += A\n    return total_absorption / len(frequencies)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.690242Z","iopub.execute_input":"2024-06-11T08:41:26.690719Z","iopub.status.idle":"2024-06-11T08:41:26.704921Z","shell.execute_reply.started":"2024-06-11T08:41:26.690677Z","shell.execute_reply":"2024-06-11T08:41:26.703760Z"},"trusted":true},"execution_count":320,"outputs":[]},{"cell_type":"code","source":"def select_parents(population, fitnesses, num_parents):\n    parents = random.choices(population, weights=fitnesses, k=num_parents)\n    return parents\n\n# Crossover\ndef crossover(parents, crossover_rate):\n    offspring = []\n    for _ in range(len(parents) // 2):\n        parent1 = random.choice(parents)\n        parent2 = random.choice(parents)\n        if random.random() < crossover_rate:\n            crossover_point = random.randint(1, len(parent1) - 2)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies)}]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies)}]\n            offspring.append(child1)\n            offspring.append(child2)\n        else:\n            offspring.append(parent1)\n            offspring.append(parent2)\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.706625Z","iopub.execute_input":"2024-06-11T08:41:26.707155Z","iopub.status.idle":"2024-06-11T08:41:26.719368Z","shell.execute_reply.started":"2024-06-11T08:41:26.707112Z","shell.execute_reply":"2024-06-11T08:41:26.718167Z"},"trusted":true},"execution_count":321,"outputs":[]},{"cell_type":"code","source":"def mutate(offspring, mutation_rate, material_properties):\n    for child in offspring:\n        if random.random() < mutation_rate:\n            mutation_point = random.randint(1, len(child) - 2)\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while len(child) > 1 and child[mutation_point - 1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = round(np.random.uniform(0.0001, 0.0003), 6)\n            child[mutation_point] = {'Material ID': material_id, 'Frequency': random.choice(frequencies), 'Thickness': thickness}\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.720818Z","iopub.execute_input":"2024-06-11T08:41:26.721267Z","iopub.status.idle":"2024-06-11T08:41:26.736530Z","shell.execute_reply.started":"2024-06-11T08:41:26.721233Z","shell.execute_reply":"2024-06-11T08:41:26.735488Z"},"trusted":true},"execution_count":322,"outputs":[]},{"cell_type":"code","source":"def genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate):\n    population = generate_initial_population(material_properties, frequencies, population_size, num_layers)\n    for generation in range(num_generations):\n        fitnesses = [evaluate_fitness(structure, frequencies) for structure in population]\n        print(f\"Generation {generation}: Best Fitness = {max(fitnesses)}\")  # Debugging statement\n        if max(fitnesses) > 0.75:\n            break\n        parents = select_parents(population, fitnesses, population_size // 2)\n        offspring = crossover(parents, crossover_rate)\n        population = mutate(offspring, mutation_rate, material_properties)\n    return population, fitnesses","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.738251Z","iopub.execute_input":"2024-06-11T08:41:26.738685Z","iopub.status.idle":"2024-06-11T08:41:26.750082Z","shell.execute_reply.started":"2024-06-11T08:41:26.738642Z","shell.execute_reply":"2024-06-11T08:41:26.748872Z"},"trusted":true},"execution_count":323,"outputs":[]},{"cell_type":"code","source":"population, fitnesses = genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate)\n\n# Filter structures with absorption > 0.75\nfiltered_structures = [structure for structure, fitness in zip(population, fitnesses) if fitness > 0.75]","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:26.751307Z","iopub.execute_input":"2024-06-11T08:41:26.751653Z","iopub.status.idle":"2024-06-11T08:41:31.746582Z","shell.execute_reply.started":"2024-06-11T08:41:26.751624Z","shell.execute_reply":"2024-06-11T08:41:31.745408Z"},"trusted":true},"execution_count":324,"outputs":[{"name":"stdout","text":"Generation 0: Best Fitness = 0.8050041815033598\n","output_type":"stream"}]},{"cell_type":"code","source":"filtered_data = []\nfor structure in filtered_structures:\n    for f in frequencies:\n        d = [layer['Thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        emi_se = calculate_shielding_effectiveness(R,T)\n        filtered_data.append({\n            'Frequency': f,\n            'Material IDs': [layer['Material ID'] for layer in structure],\n            'Thickness': d,\n            'Epsilon': eps,\n            'Mu': mu,\n            'Reflection Coefficient': R,\n            'Transmission Coefficient': T,\n            'EMI Shielding Effectiveness': emi_se,\n            'Absorption': A\n        })\n\nfiltered_df = pd.DataFrame(filtered_data)\n\n# Print filtered DataFrame\nfiltered_df","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:31.748064Z","iopub.execute_input":"2024-06-11T08:41:31.748503Z","iopub.status.idle":"2024-06-11T08:41:32.579568Z","shell.execute_reply.started":"2024-06-11T08:41:31.748463Z","shell.execute_reply":"2024-06-11T08:41:32.578392Z"},"trusted":true},"execution_count":325,"outputs":[{"execution_count":325,"output_type":"execute_result","data":{"text/plain":"         Frequency                     Material IDs  \\\n0     8.000000e+09  [0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]   \n1     9.000000e+09  [0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]   \n2     1.000000e+10  [0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]   \n3     1.100000e+10  [0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]   \n4     1.200000e+10  [0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]   \n...            ...                              ...   \n4020  8.000000e+09  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4021  9.000000e+09  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4022  1.000000e+10  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4023  1.100000e+10  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4024  1.200000e+10  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n\n                                              Thickness  \\\n0     [0, 0.000231, 0.000102, 0.000111, 0.000245, 0....   \n1     [0, 0.000231, 0.000102, 0.000111, 0.000245, 0....   \n2     [0, 0.000231, 0.000102, 0.000111, 0.000245, 0....   \n3     [0, 0.000231, 0.000102, 0.000111, 0.000245, 0....   \n4     [0, 0.000231, 0.000102, 0.000111, 0.000245, 0....   \n...                                                 ...   \n4020  [0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...   \n4021  [0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...   \n4022  [0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...   \n4023  [0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...   \n4024  [0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...   \n\n                                                Epsilon  \\\n0     [(1+0j), (3.3595-0.03338j), (44.0257-58.6855j)...   \n1     [(1+0j), (3.1533-0.3044j), (41.112-57.0349j), ...   \n2     [(1+0j), (3.1652-0.3126j), (37.5967-54.2959j),...   \n3     [(1+0j), (3.1588-0.2425j), (34.0151-51.1122j),...   \n4     [(1+0j), (3.1563-0.3053j), (32.2393-47.5891j),...   \n...                                                 ...   \n4020  [(1+0j), (3.3595-0.03338j), (44.0257-58.6855j)...   \n4021  [(1+0j), (3.1533-0.3044j), (41.112-57.0349j), ...   \n4022  [(1+0j), (3.1652-0.3126j), (37.5967-54.2959j),...   \n4023  [(1+0j), (3.1588-0.2425j), (34.0151-51.1122j),...   \n4024  [(1+0j), (3.1563-0.3053j), (32.2393-47.5891j),...   \n\n                                                     Mu  \\\n0     [(1+0j), (0.883-0.0324j), (1+0j), (1+0j), (1+0...   \n1     [(1+0j), (1.2109-0.1297j), (1+0j), (1+0j), (1+...   \n2     [(1+0j), (1.0601-0.0698j), (1+0j), (1+0j), (1+...   \n3     [(1+0j), (1.0031-0.1839j), (1+0j), (1+0j), (1+...   \n4     [(1+0j), (0.9768-0.09j), (1+0j), (1+0j), (1+0j...   \n...                                                 ...   \n4020  [(1+0j), (0.883-0.0324j), (1+0j), (0.883-0.032...   \n4021  [(1+0j), (1.2109-0.1297j), (1+0j), (1.2109-0.1...   \n4022  [(1+0j), (1.0601-0.0698j), (1+0j), (1.0601-0.0...   \n4023  [(1+0j), (1.0031-0.1839j), (1+0j), (1.0031-0.1...   \n4024  [(1+0j), (0.9768-0.09j), (1+0j), (0.9768-0.09j...   \n\n      Reflection Coefficient  Transmission Coefficient  \\\n0                   0.802856                  0.016003   \n1                   0.766447                  0.019440   \n2                   0.798476                  0.016576   \n3                   0.781178                  0.015651   \n4                   0.794683                  0.016087   \n...                      ...                       ...   \n4020                0.573627                  0.085133   \n4021                0.571057                  0.076100   \n4022                0.585978                  0.072494   \n4023                0.567351                  0.067857   \n4024                0.584913                  0.068718   \n\n      EMI Shielding Effectiveness  Absorption  \n0                       17.958089    0.181141  \n1                       17.113024    0.214113  \n2                       17.805178    0.184948  \n3                       18.054599    0.203171  \n4                       17.935248    0.189230  \n...                           ...         ...  \n4020                    10.699044    0.341240  \n4021                    11.186147    0.352843  \n4022                    11.397006    0.341529  \n4023                    11.684028    0.364791  \n4024                    11.629273    0.346369  \n\n[4025 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Frequency</th>\n      <th>Material IDs</th>\n      <th>Thickness</th>\n      <th>Epsilon</th>\n      <th>Mu</th>\n      <th>Reflection Coefficient</th>\n      <th>Transmission Coefficient</th>\n      <th>EMI Shielding Effectiveness</th>\n      <th>Absorption</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.000000e+09</td>\n      <td>[0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000231, 0.000102, 0.000111, 0.000245, 0....</td>\n      <td>[(1+0j), (3.3595-0.03338j), (44.0257-58.6855j)...</td>\n      <td>[(1+0j), (0.883-0.0324j), (1+0j), (1+0j), (1+0...</td>\n      <td>0.802856</td>\n      <td>0.016003</td>\n      <td>17.958089</td>\n      <td>0.181141</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.000000e+09</td>\n      <td>[0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000231, 0.000102, 0.000111, 0.000245, 0....</td>\n      <td>[(1+0j), (3.1533-0.3044j), (41.112-57.0349j), ...</td>\n      <td>[(1+0j), (1.2109-0.1297j), (1+0j), (1+0j), (1+...</td>\n      <td>0.766447</td>\n      <td>0.019440</td>\n      <td>17.113024</td>\n      <td>0.214113</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.000000e+10</td>\n      <td>[0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000231, 0.000102, 0.000111, 0.000245, 0....</td>\n      <td>[(1+0j), (3.1652-0.3126j), (37.5967-54.2959j),...</td>\n      <td>[(1+0j), (1.0601-0.0698j), (1+0j), (1+0j), (1+...</td>\n      <td>0.798476</td>\n      <td>0.016576</td>\n      <td>17.805178</td>\n      <td>0.184948</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.100000e+10</td>\n      <td>[0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000231, 0.000102, 0.000111, 0.000245, 0....</td>\n      <td>[(1+0j), (3.1588-0.2425j), (34.0151-51.1122j),...</td>\n      <td>[(1+0j), (1.0031-0.1839j), (1+0j), (1+0j), (1+...</td>\n      <td>0.781178</td>\n      <td>0.015651</td>\n      <td>18.054599</td>\n      <td>0.203171</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.200000e+10</td>\n      <td>[0, 3.0, 2.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000231, 0.000102, 0.000111, 0.000245, 0....</td>\n      <td>[(1+0j), (3.1563-0.3053j), (32.2393-47.5891j),...</td>\n      <td>[(1+0j), (0.9768-0.09j), (1+0j), (1+0j), (1+0j...</td>\n      <td>0.794683</td>\n      <td>0.016087</td>\n      <td>17.935248</td>\n      <td>0.189230</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4020</th>\n      <td>8.000000e+09</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...</td>\n      <td>[(1+0j), (3.3595-0.03338j), (44.0257-58.6855j)...</td>\n      <td>[(1+0j), (0.883-0.0324j), (1+0j), (0.883-0.032...</td>\n      <td>0.573627</td>\n      <td>0.085133</td>\n      <td>10.699044</td>\n      <td>0.341240</td>\n    </tr>\n    <tr>\n      <th>4021</th>\n      <td>9.000000e+09</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...</td>\n      <td>[(1+0j), (3.1533-0.3044j), (41.112-57.0349j), ...</td>\n      <td>[(1+0j), (1.2109-0.1297j), (1+0j), (1.2109-0.1...</td>\n      <td>0.571057</td>\n      <td>0.076100</td>\n      <td>11.186147</td>\n      <td>0.352843</td>\n    </tr>\n    <tr>\n      <th>4022</th>\n      <td>1.000000e+10</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...</td>\n      <td>[(1+0j), (3.1652-0.3126j), (37.5967-54.2959j),...</td>\n      <td>[(1+0j), (1.0601-0.0698j), (1+0j), (1.0601-0.0...</td>\n      <td>0.585978</td>\n      <td>0.072494</td>\n      <td>11.397006</td>\n      <td>0.341529</td>\n    </tr>\n    <tr>\n      <th>4023</th>\n      <td>1.100000e+10</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...</td>\n      <td>[(1+0j), (3.1588-0.2425j), (34.0151-51.1122j),...</td>\n      <td>[(1+0j), (1.0031-0.1839j), (1+0j), (1.0031-0.1...</td>\n      <td>0.567351</td>\n      <td>0.067857</td>\n      <td>11.684028</td>\n      <td>0.364791</td>\n    </tr>\n    <tr>\n      <th>4024</th>\n      <td>1.200000e+10</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0, 0.000247, 0.000225, 0.000168, 0.00022, 0.0...</td>\n      <td>[(1+0j), (3.1563-0.3053j), (32.2393-47.5891j),...</td>\n      <td>[(1+0j), (0.9768-0.09j), (1+0j), (0.9768-0.09j...</td>\n      <td>0.584913</td>\n      <td>0.068718</td>\n      <td>11.629273</td>\n      <td>0.346369</td>\n    </tr>\n  </tbody>\n</table>\n<p>4025 rows Ã— 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"filtered_df.to_csv('new_combinations.csv', encoding='utf-8')","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:32.581506Z","iopub.execute_input":"2024-06-11T08:41:32.581996Z","iopub.status.idle":"2024-06-11T08:41:32.771504Z","shell.execute_reply.started":"2024-06-11T08:41:32.581949Z","shell.execute_reply":"2024-06-11T08:41:32.770337Z"},"trusted":true},"execution_count":326,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.histplot(filtered_df['Absorption'], bins=20, kde=True)\nplt.title('Histogram of Absorption Values')\nplt.xlabel('Absorption')\nplt.ylabel('Number of Samples')\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-11T08:41:32.775185Z","iopub.execute_input":"2024-06-11T08:41:32.775580Z","iopub.status.idle":"2024-06-11T08:41:33.231625Z","shell.execute_reply.started":"2024-06-11T08:41:32.775545Z","shell.execute_reply":"2024-06-11T08:41:33.230410Z"},"trusted":true},"execution_count":327,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"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7XZz4YUX8sMPPzB16lS6du3Kpk2bePrpp9m+fTuffPJJzddmwoQJ9OzZkwcffBB/f3927tzJ0qVL651BRFoIU0REzNdff90ETvive/futR6TnJxsXnfddTW3e/XqZY4fP/6EzzNt2jTzWD96P/nkExMw//a3v9Xa/pvf/MY0DMPcuXOnaZqmuXbtWhMwb7vttlr7XX/99SZgPvDAAzXbHnjgARMwr7rqqqOer6Sk5Kht7777rgmYS5YsOeoYU6dOrdlWWVlpJiYmmoZhmI8++mjN9tzcXNPhcNT6mhzL+vXrTcC84YYbam3/05/+ZALmt99+W7PtuuuuM4OCgk54vF968sknTYfDYRYUFJimaZrbt283AfPjjz+utV/1+e7bt69ZUVFRs/3xxx83AfPTTz81TdM0P/74YxMwV69efdznrOu5M03TBEybzWZu3ry51r579uwxAdPhcJj79++v2b5y5UoTMG+//faabcd7D1Uf/5fvgYsvvtj08/Mzd+3aVbMtIyPDDAkJMYcNG3bU12P06NGm2+2u2X777bebdrvdzMvLO+7rN03TzMnJMf39/Y96r/35z382AXPbtm2maR77fbd8+XITMN96662abYsWLTIBc9GiRTXbfv39Vm348OHm8OHDa26//fbbps1mM7///vta+7300ksmYC5dutQ0TdN8+umnTcA8fPjwCV+biMjxaGqfiMgvzJ49m4ULFx71r2fPnid9bHh4OJs3b2bHjh0eP+8XX3yB3W7nlltuqbX9jjvuwDRNvvzySwC++uorAP74xz/W2u/mm28+7rH/8Ic/HLXN4XDU/H9ZWRnZ2dkMHDgQgHXr1h21/w033FDz/3a7nX79+mGaJlOmTKnZHh4eTufOndm9e/dxs0DVawWYMWNGre133HEHAJ9//vkJH38ic+bMYfz48YSEhADQsWNH+vbte9zpfVOnTq21zu2mm27Cx8enJmN4eDgA8+bNO+6oZF3PXbXhw4fTrVu3Yx7r4osvpnXr1jW3+/fvz4ABA2ryeMLlcrFgwQIuvvhi2rdvX7O9VatWXH311fzwww8UFBTUeszUqVNrjUYOHToUl8vF3r17T/hcERERnH/++fz3v/+tWYdnmibvvfce/fr1o1OnTkDt953T6eTIkSN06NCB8PDwY77vTsUHH3xA165d6dKlC9nZ2TX/zjnnHAAWLVoE/O/cfvrpp7jd7gZ5bhFpWVRIiYj8Qv/+/Rk9evRR/yIiIk762AcffJC8vDw6depEjx49uPPOO9m4cWOdnnfv3r0kJCTUFADVunbtWnN/9X9tNhvt2rWrtV+HDh2Oe+xf7wuQk5PDrbfeSlxcHA6Hg5iYmJr98vPzj9o/KSmp1u2wsDACAgKIjo4+avuv1xj9WvVr+HXm+Ph4wsPDT/qh/XhSU1P58ccfGTx4MDt37qz5N2LECObNm3dU0QBVhdYvBQcH06pVq5o1O8OHD+eyyy5j1qxZREdHc9FFF/H666/XWmtT13NX7Vjn43h5ADp16lSnNUS/dvjwYUpKSujcufNR93Xt2hW3282+fftqbf/1ea5+35/snELV9L7i4mI+/fRTAJYtW0ZaWlqtJhOlpaXcf//9NWvJoqOjiYmJIS8v75jvu1OxY8cONm/eTExMTK1/1cVcVlYWUDVddfDgwdxwww3ExcVx5ZVX8v7776uoEpE60xopEZEGMmzYMHbt2sWnn37KggUL+Pe//83TTz/NSy+9VGtE53T75ShAtcsvv5xly5Zx55130rt3b4KDg3G73Zx77rnH/CBpt9vrtA2oc7vxX6/Dqq933nkHgNtvv53bb7/9qPv/85//MHnyZI+OaRgGH374IStWrOCzzz5j/vz5/O53v+Opp55ixYoVBAcHe5zzWOfDW9TnnE6YMIGwsDDmzp3L1Vdfzdy5c7Hb7Vx55ZU1+9x88828/vrr3HbbbQwaNIiwsDAMw+DKK688aQFzvPeLy+WqldvtdtOjRw/+8Y9/HHP/Nm3aAFXnYcmSJSxatIjPP/+cr776iv/7v//jnHPOYcGCBcf9WoiIVFMhJSLSgCIjI5k8eTKTJ0+mqKiIYcOGMXPmzJpC6ngfBpOTk/n6668pLCysNbKxdevWmvur/+t2u9mzZ0+t0YudO3fWOWNubi7ffPMNs2bNqmkCAJzSlMRTUf0aduzYUTNqA5CZmUleXl7Na/WEaZrMnTuXkSNHHjXtEeChhx5izpw5RxVSO3bsYOTIkTW3i4qKOHjw4FHXqxo4cCADBw7k73//O3PnzmXixIm899573HDDDXU+d3VxrHOwffv2Wg0p6lqAxsTEEBgYyLZt2466b+vWrdhstpqioiH4+/vzm9/8hrfeeovMzEw++OADzjnnHOLj42v2+fDDD7nuuutqdXcsKysjLy/vpMePiIg45n579+6tNXUxJSWFDRs2MGrUqJN+rWw2G6NGjWLUqFH84x//4OGHH+bee+9l0aJFjB49+uQvWkRaNE3tExFpIL9uHR4cHEyHDh1qTQMLCgoCOOoD4fnnn4/L5eL555+vtf3pp5/GMAzOO+88AMaNGwfACy+8UGu/5557rs45q//S/utRhmeeeabOx6iP6iLl189XPYJwog6Ex7N06VLS0tKYPHkyv/nNb476d8UVV7Bo0SIyMjJqPe5f//pXrbVPL774IpWVlTVf79zc3KO+Tr179waoOa91PXd18cknn3DgwIGa26tWrWLlypW1jnG899Cv2e12xo4dy6efflpramBmZiZz585lyJAhhIaG1jlbXUycOBGn08nvf/97Dh8+fNS1o+x2+1Ffz+eeew6Xy3XSY6ekpLBixQoqKipqts2bN++o6YmXX345Bw4cOObFsktLS2vWcOXk5Bx1/6/PrYjIiWhESkSkgXTr1o0RI0bQt29fIiMjWbNmDR9++CHTp0+v2adv374A3HLLLYwbN65m6tMFF1zAyJEjuffee0lLS6NXr14sWLCATz/9lNtuu42UlJSax1922WU888wzHDlypKb9+fbt24G6jVaEhoYybNgwHn/8cZxOJ61bt2bBggXs2bOnEb4qR+vVqxfXXXcd//rXv8jLy2P48OGsWrWKN998k4svvrjWCFFdzZkzB7vdftwi7MILL+Tee+/lvffeq9XkoqKiglGjRnH55Zezbds2XnjhBYYMGcKFF14IwJtvvskLL7zAJZdcQkpKCoWFhbzyyiuEhobWFIR1PXd10aFDB4YMGcJNN91EeXk5zzzzDFFRUdx11101+xzvPXQsf/vb32qulfTHP/4RHx8fXn75ZcrLy3n88cfrnKuuhg8fTmJiIp9++ikOh4NLL7201v0TJkzg7bffJiwsjG7durF8+XK+/vproqKiTnrsG264gQ8//JBzzz2Xyy+/nF27dvHOO+8c9fW95ppreP/99/nDH/7AokWLGDx4MC6Xi61bt/L+++8zf/58+vXrx4MPPsiSJUsYP348ycnJZGVl8cILL5CYmFhzvTURkROyql2giIg3qW7/fLw218OHDz9p+/O//e1vZv/+/c3w8HDT4XCYXbp0Mf/+97/Xaq9dWVlp3nzzzWZMTIxpGEatNtaFhYXm7bffbiYkJJi+vr5mx44dzSeeeKJWO2rTNM3i4mJz2rRpZmRkpBkcHGxefPHF5rZt20ygVjvy6tblx2rvvH//fvOSSy4xw8PDzbCwMPO3v/2tmZGRcdwW6r8+xvHakh/r63QsTqfTnDVrltmuXTvT19fXbNOmjXnPPfeYZWVldXqeX6qoqDCjoqLMoUOHnnC/du3amX369DFN83/ne/HixebUqVPNiIgIMzg42Jw4caJ55MiRmsesW7fOvOqqq8ykpCTT39/fjI2NNSdMmGCuWbOm1rHreu4Ac9q0aUdlq25//sQTT5hPPfWU2aZNG9Pf398cOnSouWHDhlr7nug99OvzV/0axo0bZwYHB5uBgYHmyJEjzWXLltXa53jv/2O1IT+ZO++80wTMyy+//Kj7cnNzzcmTJ5vR0dFmcHCwOW7cOHPr1q1HfS8d73mfeuops3Xr1qa/v785ePBgc82aNUe1PzfNqvfEY489Znbv3t309/c3IyIizL59+5qzZs0y8/PzTdM0zW+++ca86KKLzISEBNPPz89MSEgwr7rqKnP79u11fq0i0rIZplnHVcEiIuK11q9fT58+fXjnnXeOmk4l3i8tLY127drxxBNP8Kc//cnqOCIiUgdaIyUi0sSUlpYete2ZZ57BZrMxbNgwCxKJiIi0PFojJSLSxDz++OOsXbuWkSNH4uPjw5dffsmXX37J1KlTG7QLm4iIiByfCikRkSbm7LPPZuHChTz00EMUFRWRlJTEzJkzuffee62OJiIi0mJojZSIiIiIiIiHtEZKRERERETEQyqkREREREREPKQ1UoDb7SYjI4OQkJA6XcxSRERERESaJ9M0KSwsJCEhAZvt+ONOKqSAjIwMdboSEREREZEa+/btIzEx8bj3q5ACQkJCgKovVmhoaL2P53Q6WbBgAWPHjsXX17fex5OGp3Pk/XSOvJvOj/fTOfJ+OkfeTefH+zXWOSooKKBNmzY1NcLxqJCCmul8oaGhDVZIBQYGEhoaqm88L6Vz5P10jrybzo/30znyfjpH3k3nx/s19jk62ZIfNZsQERERERHxkAopERERERERD6mQEhERERER8ZAKKREREREREQ+pkBIREREREfGQCikREREREREPqZASERERERHxkAopERERERERD6mQEhERERER8ZAKKREREREREQ+pkBIREREREfGQCikREREREREPqZASERERERHxkAopERERERERD6mQEhERERER8ZAKKREREREREQ+pkBIREREREfGQCikREREREREP+VgdQETqLz09nezsbKtjABAdHU1SUpLVMUREREQalQopkSYuPT2dLl27UlpSYnUUAByBgWxNTVUxJSIiIs2aCimRJi47O5vSkhIm3v0EcUkplmbJTN/FnMfuJDs7W4WUiIiINGsqpESaibikFBI7drc6hoiIiEiLoGYTIiIiIiIiHlIhJSIiIiIi4iEVUiIiIiIiIh5SISUiIiIiIuIhFVIiIiIiIiIesrSQmjlzJoZh1PrXpUuXmvvLysqYNm0aUVFRBAcHc9lll5GZmVnrGOnp6YwfP57AwEBiY2O58847qaysPN0vRUREREREWhDL2593796dr7/+uua2j8//It1+++18/vnnfPDBB4SFhTF9+nQuvfRSli5dCoDL5WL8+PHEx8ezbNkyDh48yLXXXouvry8PP/zwaX8tIiIiIiLSMlheSPn4+BAfH3/U9vz8fF599VXmzp3LOeecA8Drr79O165dWbFiBQMHDmTBggVs2bKFr7/+mri4OHr37s1DDz3E3XffzcyZM/Hz8zvdL0dERERERFoAywupHTt2kJCQQEBAAIMGDeKRRx4hKSmJtWvX4nQ6GT16dM2+Xbp0ISkpieXLlzNw4ECWL19Ojx49iIuLq9ln3Lhx3HTTTWzevJk+ffoc8znLy8spLy+vuV1QUACA0+nE6XTW+zVVH6MhjiWNozmdI7fbjcPhwG6AYboszWI3wOFw4Ha76/21bU7nqDnS+fF+OkfeT+fIu+n8eL/GOkd1PZ5hmqbZoM/sgS+//JKioiI6d+7MwYMHmTVrFgcOHOCnn37is88+Y/LkybUKHoD+/fszcuRIHnvsMaZOncrevXuZP39+zf0lJSUEBQXxxRdfcN555x3zeWfOnMmsWbOO2j537lwCAwMb9kWKiIiIiEiTUVJSwtVXX01+fj6hoaHH3c/SEalfFjo9e/ZkwIABJCcn8/777+NwOBrtee+55x5mzJhRc7ugoIA2bdowduzYE36x6srpdLJw4ULGjBmDr69vvY8nDa85naMNGzYwbNgwpj81h4SULid/QCPK2LWV5++YyJIlS+jVq1e9jtWczlFzpPPj/XSOvJ/OkXfT+fF+jXWOqmernYzlU/t+KTw8nE6dOrFz507GjBlDRUUFeXl5hIeH1+yTmZlZs6YqPj6eVatW1TpGdVe/Y627qubv74+/v/9R2319fRv0JDT08aThNYdzZLPZKC0txWWCadgtzeIyobS0FJvN1mBf1+ZwjpoznR/vp3Pk/XSOvJvOj/drjM/wdeFV15EqKipi165dtGrVir59++Lr68s333xTc/+2bdtIT09n0KBBAAwaNIhNmzaRlZVVs8/ChQsJDQ2lW7dupz2/iIiIiIi0DJaOSP3pT3/iggsuIDk5mYyMDB544AHsdjtXXXUVYWFhTJkyhRkzZhAZGUloaCg333wzgwYNYuDAgQCMHTuWbt26cc011/D4449z6NAh7rvvPqZNm3bMEScREREREZGGYGkhtX//fq666iqOHDlCTEwMQ4YMYcWKFcTExADw9NNPY7PZuOyyyygvL2fcuHG88MILNY+32+3MmzePm266iUGDBhEUFMR1113Hgw8+aNVLEhERERGRFsDSQuq999474f0BAQHMnj2b2bNnH3ef5ORkvvjii4aOJiIiIiIiclxetUZKRERERESkKVAhJSIiIiIi4iEVUiIiIiIiIh5SISUiIiIiIuIhFVIiIiIiIiIesrRrn0hTlp6eTnZ2ttUxSE1NtTqCiIiISIujQkrkFKSnp9Ola1dKS0qsjlKjqKjI6ggiIiIiLYYKKZFTkJ2dTWlJCRPvfoK4pBRLs2xZtZgFH7zBkZJK9ueWUFrhosLlxjTBZZqYJvjYDfzsNvx8bAT42gkL8CXA14ZhGJZmFxEREWmqVEiJ1ENcUgqJHbuflucyTZPCskoyC8s4XFhOTnEF+aVOcuJH0ebmMawpgzXrDtT5eL52g1CHLzHB/sSHBhAXGkB0iB8+Ni2dFBERETkZFVIiXso0TXJLnOzLKWFfbgkH8kopc7qPsacN03Tja5iEBAbg8LXj62PDbhjYDAPDAKfLTYXLjbPSpKSikuIKF06XyZGiCo4UVbD1UCEAPjaDpMhA2scE0TYqiCB//YgQERERORZ9ShLxIm7T5GBeGTuzith5uIii8spa99sMiAr2JzbEn+hgf8IcvhzY8D0fPXkH1z7wAr0HDa/T81S63BSUVZJXWkFWQTmZBWUcKiijzOlmd3Yxu7OLAWgT4eCM1mGkxARjt2kaoIiIiEg1FVIiXiC3pIKfDuSz9VAhJRWumu12m0FCWABtIgNJjHAQE+yPj7321LscKsBd+etDnpCP3UZkkB+RQX60jw4GqkbAsosq2J1dxO7DxWQVlrMvt5R9uaU4fO10Twild5twjVKJiIiIoEJKxDKmabI7u5gN+/PYl1Nas93Px0ZKdBAdYoNJigw8qnBqLIZhEBPiT0yIPwPaRVFQ6mRzRgGbM/IprnCxZm8u6/fl0TMxjL7JEQT66ceHiIiItFz6JCRympmmyc6sIlbuyeFIcUXN9rZRgZzROoy2UUFeMY0u1OHLoJQo+reLZE92MWv25pBZUM669Dw27s/nzKQI+rWNwPc0FXoiIiIi3kSFlMhptDu7iGU7j9QUUH4+Nnq2DuOM1mGEOXwtTndsdptBh9hgUmKCSDtSwordR8gqLGdVWg5bDxUwvHNMzfRAERERkZZChZTIaVBQ6mTx9sM1TRz87Db6JIXTp004/r52i9PVjWEYtIsOom1UILsOF7N4+2EKyir5bMNB2kcHMbJLrNURRURERE4bFVIijcjtNlmXnsvKPTlUuk1sBvRpUzUlLqCJFFC/ZhhVI1TJUYGs3JPDj+m57M4uJmPlXvqEWT8lUUREROR0UCEl0kgKy5x8tfkQGXllALQOdzCycwxRwf4WJ2sYvnYbQzpE0zU+hPlbMjlcWM7ybF8ix06jvNK0Op6IiIhIo9IqcZFGsCe7mLmr0snIK8PPbmNM1zguO7N1symifikq2J/L+yVyZlI4ACF9zuOur7PZe6TY2mAiIiIijUiFlEgDMk2TZbuy+e+GDMqcbmJD/Lmqfxu6JYRiGM132puPzcbQjjEMiXVSWXiEfQWVXPj8UpbuzLY6moiIiEijUCEl0kBcbpP5WzJZnZYLQO/EcH7bL5HwQD+Lk50+cQEmh966nY6RvuSXOrn2tVW8vnQPpqmpfiIiItK8qJASaQAVlW7+uyGDbYcKsRkwtlscwzvH4GNred9irqIcHhoZxaV9WuNym8z6bAuzPtuC261iSkRERJqPlvcpT6SBlVRU8uG6/aTnlOBrN7igVwJdW4VaHctSfnaDpy7vxV/O7wLAG8vSmPH+epwut8XJRERERBqGCimRenC64ZP1GRwuLMfha+eyMxNpGxVkdSyvYBgGU4el8MwVvfGxGXyyPoOpb62htMJldTQRERGRelMhJXKKDB9/lh72qSmifts3kbjQAKtjeZ2L+7TmlWv7EeBrY9G2w1z72kqKyiutjiUiIiJSLyqkRE6B02USc8k9HCm34edj45I+rYkIajlNJTw1skss70wZQGiAD6vTcvnd66spqVAxJSIiIk2XCikRD5mmyXOr8nC074fdMLmoVwIxIc3v+lANrV/bSN65YQAhAT6sSsvhd2+s1jQ/ERERabJUSIl46KXFu/lhXxmmy8nA6EoSwh1WR2oyeiaG89bv+hPs78OK3Tnc+NYaypwqpkRERKTpUSEl4oHvdxzmiflbAchZ+DLxDrX09lSfpAjemHwWgX52ftiZzfS5P1Kpbn4iIiLSxKiQEqmjfTkl3PLuj7hNGNXOQdGGr6yO1GT1axvJa9efhZ+Pja9TM/nrp5t10V4RERFpUnysDiBSV+np6WRnZzfIsdzuqhGQDRs2YKvDRXPLK03+8m02uSWVpET4MjTwIK81SJKWa2D7KJ69sg9/nLOWd1elExfqz22jO1kdS0RERKROVEhJk5Cenk6Xrl0pLSlpkOM5HA7effddhg0bRmlp6Un3jxj9B0L7TsBVks/iF27j28LDABQVFTVInpbq3DPiefCiM7jvk5945usdxIYEcPWAJKtjiYiIiJyUCilpErKzsyktKWHi3U8Ql5RS7+PZjar/Tn9qDq6TzCjLKjP4PssXgOHJgcQ9+jKpqxbz5Zv/pKysrN5ZWrpJA5PJLCjjuW93ct8nm2gd4WB4pxirY4mIiIickAopaVLiklJI7Ni93scxTBeUbichpQumYT/ufuWVLhasTAcq6dE6jL5dYgHITN9V7wzyPzPGdCIjr4z/rNvP9Lnr+PiPg0mOUEt5ERER8V4qpERO4Psd2RSWVRIa4MOQDtFWx2kyUlNTPX7M5e1MNqf7sjXbyTX/+oGHz4kE6r6O7Viio6NJStJUQREREWl4KqREjiMtu5jNGQUAjOkWh5+PmlyeTEFO1dqxSZMmndLjbYFhtLr2aQ4Sy8TZ3/L8b7rWeR3bsTgCA9mamqpiSkRERBqcCimRY6iodPPN1iwAercJJzEi0OJETUNpUVXhOf7399K5Z99TOkZ+hcGiTBO/Nj34ZK+7TuvYjiUzfRdzHruT7OxsFVIiIiLS4FRIiRzD6rQcisorCXP4cnZKlNVxmpyohORTXsuWCATEFjFv40GWHLJxbrdEOrcKa9iAIiIiIvWkuUoiv5JXUsGP6XkADOsYja9d3yanW0pMMGclhwPw9dbDHCkqtzaQiIiIyK/oE6LIryzZkY3LNEmODKRddJDVcVqsQe0j6BTmptJt8vmmg1RUuq2OJCIiIlJDhZTIL6QdKWZPdjE2A4Z1isEwDKsjtVg2w+C6jm6C/e3kljhZmJqJaZ7CYikRERGRRqBCSuRnLrfJku1VXed6tQknMsjP4kQS7Avjz4jDZsDOrCI2Hsi3OpKIiIgIoEJKpMaG/Xnkljhx+NoZ0C7S6jjys1ZhATXX8Pp+RzbZWi8lIiIiXkCFlAhV7c7XpOUCcHZKFP4+dosTyS/1bhNO26hAXG6TLzcdwunSeikRERGxlgopEapGo0qdLsIcvnRrFWp1HPkVwzAY0y2OID87OSUVNVMwRURERKyiQkpavPJKF2v3Vo1GDWwXic2mBhPeKNDPh7Hd4wH4KaOAHZmFFicSERGRlkyFlLR4P6bnUV7pJjLQj07xIVbHkRNIigykX3IEAN9uzaKovNLiRCIiItJSqZCSFq3M6aq5+O6A9pHY1O7c6w1sH0VsiD9llW6+Vkt0ERERsYgKKWnR1qbnU+FyEx3sR8fYYKvjSB3YbQbjusdjtxnsPVLCTwcKrI4kIiIiLZAKKWmxip2wfn/VdYkGto/SxXebkMggPwanRAGwZMdh8koqLE4kIiIiLY0KKWmxlmYaOF0m0cF+tI8OsjqOeKh3m3ASwx1Uuk0WbMnErSl+IiIichqpkJIWqdLlZsmhqrd/3+QIjUY1QdUt0f3sNg7ml7F+X57VkURERKQFUSElLdLWzCIKnQbB/nY6xqpTX1MV6vBlaMdoAJbtOqIpfiIiInLaqJCSFsc0TdalV62N6tMmDLuuG9WkdU8IpU2EA5fb5OvULHXxExERkdNChZS0OGlHSsgpcRJgNzkjIdTqOFJPhmEwqmscPjaDA3mlbDqQb3UkERERaQFUSEmLs25vLgBnx5r4++hboDkIc/gyuEPVFL8fdmZTUOa0OJGIiIg0d/oUKS1KZkEZ+/NKsRkwrJXb6jjSgHolhtEqLACny+TbrVlohp+IiIg0JhVS0qL8mJ4HQOe4YCL8rc0iDcswDEZ3jcNuVF2o90CJfryJiIhI49EnDWkxSioq2ZlVBEDvxDCL00hjiAzyo1/bCAA25Nox/AItTiQiIiLNlQopaTFSDxbiMk1iQ/yJC9VwVHPVLzmCcIcvZW6D8GHXWh1HREREmikVUtIimKZZ082th0ajmjUfu41zusQCEHLm+ew4omtLiYiISMNTISUtQnpOCfmlTvx8bHSO0wV4m7s2kYEkBbowDBsvrs2n0qXGIiIiItKwVEhJi1A9GtU1PgRfu972LUHPCBeu0gLS8ip5c/leq+OIiIhIM6NPlNLsFZVXsju7GIAerTWtr6Xwt0Pe4jcBeGbhdrIKyyxOJCIiIs2JCilp9jZn5GOakBAeQFSwmky0JEUbFtAh0pfC8koe/XKr1XFERESkGVEhJc2a223y04ECQKNRLZPJjX1CMQz4aN0B1qTlWB1IREREmgkVUtKspeeUUFReSYCvjQ6xwVbHEQt0jPLjin5tALj/08243KbFiURERKQ5UCElzVrqwarRqC5xofjY9HZvqe4c15nQAB+2HCxg7ko1nhAREZH60ydLabbKnS52/dxkomsrtTxvyaKC/blzXGcAnlywndxiXVtKRERE6keFlDRbO7KKcLlNooL8iAlRk4mW7uoByXSJDyG/1Mk/v9lhdRwRERFp4lRISbNVM62vVQiGYVicRqxmtxncP6EbAG+v2MuOzEKLE4mIiEhTpkJKmqW8kgoy8sswgC7xoVbHES9xdodoxnSLw+U2+dvnqVbHERERkSZMhZQ0S1sPVY02tIkMJNjfx+I04k3uPb8rvnaDxdsPs2hrltVxREREpIlSISXNjmmaNdP61GRCfq1tdBCTB7cD4KHPt+B0uS1OJCIiIk2R1xRSjz76KIZhcNttt9VsKysrY9q0aURFRREcHMxll11GZmZmrcelp6czfvx4AgMDiY2N5c4776SysvI0pxdvkpFXRkFZJb52g5QYXTtKjjb9nA5EBfmx+3Axc1aoHbqIiIh4zisKqdWrV/Pyyy/Ts2fPWttvv/12PvvsMz744AMWL15MRkYGl156ac39LpeL8ePHU1FRwbJly3jzzTd54403uP/++0/3SxAvknqoajSqY2wIvnaveIuLlwkN8OX2MZ0A+Oc3Oygoc1qcSERERJoayz9lFhUVMXHiRF555RUiIiJqtufn5/Pqq6/yj3/8g3POOYe+ffvy+uuvs2zZMlasWAHAggUL2LJlC++88w69e/fmvPPO46GHHmL27NlUVOg6MS2Ry22yM6sIgC7xmtYnx3flWW1oHxNEbomTl77bZXUcERERaWIsX4U/bdo0xo8fz+jRo/nb3/5Ws33t2rU4nU5Gjx5ds61Lly4kJSWxfPlyBg4cyPLly+nRowdxcXE1+4wbN46bbrqJzZs306dPn2M+Z3l5OeXl5TW3CwqqRjCcTidOZ/3/Ml19jIY4llRxu904HA7sBhim67j77TtSQnmlm0A/O4nhfsfdt3r7iY51Ij52Gw6HAx+bccrHaCjNNUt9z5HdAIfDgdvtPu734p1jOnLT3PW8+sMeruzXmlZhAaect6XRzznvp3Pk/XSOvJvOj/drrHNU1+MZpmmaDfrMHnjvvff4+9//zurVqwkICGDEiBH07t2bZ555hrlz5zJ58uRaBQ9A//79GTlyJI899hhTp05l7969zJ8/v+b+kpISgoKC+OKLLzjvvPOO+bwzZ85k1qxZR22fO3cugYGBDfsi5bR6Z6eN1YdtDI1385t2aiIgJ2aa8NxmO7sKDfrHuJnYQe8ZERGRlq6kpISrr76a/Px8QkOPfxkdy0ak9u3bx6233srChQsJCDi9fwW+5557mDFjRs3tgoIC2rRpw9ixY0/4xaorp9PJwoULGTNmDL6+vvU+nsCGDRsYNmwY05+aQ0JKl2PuU+lysyFnL2ASn5DIHsfx31eG6aJt2S7SAlIwDbvHedYv/pL3n76Pq/7yLD36D/b48Q2puWap7znK2LWV5++YyJIlS+jVq9dx90vslc9vXl7J6mwb9/12sDo91pF+znk/nSPvp3Pk3XR+vF9jnaPq2WonY1khtXbtWrKysjjzzDNrtrlcLpYsWcLzzz/P/PnzqaioIC8vj/Dw8Jp9MjMziY+PByA+Pp5Vq1bVOm51V7/qfY7F398ff3//o7b7+vo26Elo6OO1ZDabjdLSUlwmx/1QvTe3lAqXSbC/D63CAzEN46THNQ37KX1Ir3S5KS0tpdJtntLjG1Jzz3Kq58hlQmlpKTab7YTfh/3aRTOhZyvmbTzIEwt38PaUAfWJ2+Lo55z30znyfjpH3k3nx/s1xmf4urCs2cSoUaPYtGkT69evr/nXr18/Jk6cWPP/vr6+fPPNNzWP2bZtG+np6QwaNAiAQYMGsWnTJrKy/ndRzYULFxIaGkq3bt1O+2sSa23PrGoy0SE2GKMORZRItbvGdcHXbvD9jmyW7zpidRwRERFpAiwbkQoJCeGMM86otS0oKIioqKia7VOmTGHGjBlERkYSGhrKzTffzKBBgxg4cCAAY8eOpVu3blxzzTU8/vjjHDp0iPvuu49p06Ydc8RJmq9Kl5vd2VWFVKc4XTtKPJMUFchV/ZN4a/lenlywjQ//MEjFuIiIiJyQ5e3PT+Tpp59mwoQJXHbZZQwbNoz4+Hg++uijmvvtdjvz5s3DbrczaNAgJk2axLXXXsuDDz5oYWqxwp4jxThdJiEBPsSHqvOaeG76yA4E+NpYuzeX77YdtjqOiIiIeDnL25//0nfffVfrdkBAALNnz2b27NnHfUxycjJffPFFIycTb7fj52l9HTWtT05RbGgA1w1qy8tLdvPE/G0M7xSDzab3koiIiBybV49IidSF0+VmT3YxAB3j1HFNTt0fhqcQ7O/DloMFfPnTIavjiIiIiBdTISVNXlp2MZVuk9AAH+JCtDZOTl1EkB83DG0HwFMLt1Hp0nWlRERE5NhUSEmTt+tw1WiUuvVJQ5gypB0Rgb7sPlzMxz8esDqOiIiIeCmvWiMl4imX22TPkapCKiVG3frkaKmpqR4/5oIOAby10cnjX2wmyczC117/Aj06OpqkpKR6H0dERES8gwopadL255ZQUekm0M9OfJi69cn/FORUdd6bNGmSx481fPxImPoKh4li9O8foOjHz+udxxEYyNbUVBVTIiIizYQKKWnSqqf1tY8OwqZpffILpUUFAIz//b107tnX48fvKrSxPhdan/sHxv1uCj71mAidmb6LOY/dSXZ2tgopERGRZkKFlDRZpmmy+3BV23NN65PjiUpIJrFjd48f18ptsnt5GgVllWQHtKJfcmQjpBMREZGmSs0mpMnKLCinuMKFn91GYqTD6jjSzNhtBgPbRwGwJi2X8kqXxYlERETEm6iQkiZr18+jUW2jAvGx6a0sDa9zfAiRgX6UV7pZl55ndRwRERHxIvr0KU1WdSHVXtP6pJHYDIOBKVVT+n5Mz6XUqVEpERERqaJCSpqknOIKckuc2AxoGx1odRxpxjrEBBMT7I/TZbJeo1IiIiLyMxVS0iRVj0a1iQzE38ducRppzgzDoH+7qlGp9fvyKNeolIiIiKBCSpqo3Yd1EV45fVJigogK8qPC5Wb9vjyr44iIiIgXUCElTU5xeSWHCsoAaBcdZHEaaQl+OSr14748dfATERERFVLS9Ow9UgJAbIg/wf66FJqcHh1ig4kI9KW80s3G/flWxxERERGLqZCSJmfPkappfW01GiWnkc0w6N+2uoNfHhWVbosTiYiIiJVUSEmT4jYh/ecRqXZRKqTk9OoUF0KYw5dSp4tNBzQqJSIi0pKpkJImJbvcoMLlxuFrJy7U3+o40sLYbAZntY0AYF16Lk6XRqVERERaKhVS0qQcLK16y7aNDsQwDIvTSEvUJT6U0AAfSipc/KRRKRERkRZLhZQ0KYd+LqTUrU+sYrcZ9Pt5rdTa9FwqNSolIiLSIqmQkibDJyKBokoDmwFJkYFWx5EWrGurEIL9fSgud7H5YIHVcURERMQCKqSkyXCknAVA63AH/j52i9NIS+Zjs9EvuWqt1Jq0XFxu0+JEIiIicrqpkJImo7qQUttz8QbdE0IJ8rNTVF5JqkalREREWhwVUtIklDjdBLQ5A9D6KPEOPnYbfX8elVqdlqNRKRERkRZGhZQ0CRsyyzHsPgT7mEQE+lkdRwSAM1qH4fC1U1BWyY7MQqvjiIiIyGmkQkqahB8PlgMQF6AOaeI9fO02eieFA7Bmby6mqVEpERGRlkKFlHg90zRZn1lVSMU7VEiJd+nVOgw/u40jxRWkHSmxOo6IiIicJiqkxOvtzCoiu8SNWVlBtL/+4i/exd/XTo/WYQCsScuxOI2IiIicLiqkxOst3n4YgLJ9P+Gjd6x4od5J4dgNg4z8MjLySq2OIyIiIqeBPpaK16supEp3r7U4icixBfv70KVVCFC1VkpERESaPxVS4tVKK1ys3FM1XapszzqL04gcX3Ur9D3ZxRwpKrc4jYiIiDQ2FVLi1VbuOUJFpZvoQBvOI/usjiNyXBGBfnSICQZgrUalREREmj0VUuLVqqf19Yn3tziJyMn1bVs1KrUts5CCMqfFaURERKQxqZASr7bk50KqtwopaQLiQwNIjHDgNuHH9Dyr44iIiEgjUiElXmtfTgm7Dhdjtxn0jFUhJU1Dv5/XSv10IJ9Sp8viNCIiItJYVEiJ11qyo2o06sykcIL89FaVpiEpMpCYEH8q3SYb9uVZHUdEREQaiT6diteqntY3rGOMxUlE6s4wjJpRqQ378nC63BYnEhERkcagQkq8UqXLzbKdRwAY1kmFlDQtHWKDCXP4Ulbp5qcD+VbHERERkUbgcSG1b98+9u/fX3N71apV3HbbbfzrX/9q0GDSsm3Yn09heSXhgb6c0TrM6jgiHrEZBn2Tqkal1qXn4TYtDiQiIiINzuNC6uqrr2bRokUAHDp0iDFjxrBq1SruvfdeHnzwwQYPKC3TDzuyARicEo3dZlicRsRzXVuFEOhnp6i8kv0lGvwXERFpbjz+7f7TTz/Rv39/AN5//33OOOMMli1bxpw5c3jjjTcaOp+0UEt3/lxIdYi2OInIqfGx2+iVGA7A9gIVUiIiIs2Nx7/dnU4n/v5Vrai//vprLrzwQgC6dOnCwYMHGzadtEhF5ZWsS88FYGhHFVLSdPVIDMPHZpDvtBGQ1NPqOCIiItKAPC6kunfvzksvvcT333/PwoULOffccwHIyMggKiqqwQNKy7NqzxEq3SZJkYG0iQy0Oo7IKXP42unWKhSAkP6XWJxGREREGpLHhdRjjz3Gyy+/zIgRI7jqqqvo1asXAP/9739rpvyJ1Mf3P6+PGqLRKGkG+iSFAyaBKWexL99pdRwRERFpID6ePmDEiBFkZ2dTUFBAREREzfapU6cSGKjRA6m/6kYTQ7U+SpqB8EA/EhwmGaUG/91ezEUjrU4kIiIiDeGUVkCbpsnatWt5+eWXKSwsBMDPz0+FlNRbZkEZO7KKMAwYlKKpotI8dAx1AbB4bymHC8stTiMiIiINweNCau/evfTo0YOLLrqIadOmcfjwYaBqyt+f/vSnBg8oLUv1aFTP1mGEB/pZnEakYUT5mZRnbKXSDW8vT7M6joiIiDQAjwupW2+9lX79+pGbm4vD4ajZfskll/DNN980aDhpedT2XJojw4CCVR8D8PaKvZRWuCxOJCIiIvXl8Rqp77//nmXLluHnV3u0oG3bthw4cKDBgknLY5omP+xUowlpnkq2LycuyE5msZP/rNvPpIHJVkcSERGRevB4RMrtduNyHf3X1P379xMSEtIgoaRl2pFVRFZhOQG+NvomR5z8ASJNielmQscgAF79YQ9ut2lxIBEREakPjwupsWPH8swzz9TcNgyDoqIiHnjgAc4///yGzCYtTPX6qP7tovD3sVucRqThndPOQWiAD3uyi/k6NdPqOCIiIlIPHhdSTz31FEuXLqVbt26UlZVx9dVX10zre+yxxxojo7QQy3b9vD5K3fqkmXL42rh6QNWUvn9/v8fiNCIiIlIfHq+RSkxMZMOGDbz33nts3LiRoqIipkyZwsSJE2s1nxDxRKXLzcrdOYAaTUjzdv3Zbfn397tZlZbDhn159GoTbnUkEREROQUeF1IAPj4+TJo0qaGzSAv2U0YBheWVhDl86doq1Oo4Io0mPiyAC3sn8NG6A7zy/W6ev/pMqyOJiIjIKahTIfXf//63zge88MILTzmMtFzVbc8Hto/EbjMsTiPSuG4Y0p6P1h3gi00H2ZdTQptIXcxcRESkqalTIXXxxRfX6WCGYRyzo5/IySzfdQSAs1M0rU+av24JoQzpEM0PO7N5fWka91/QzepIIiIi4qE6NZtwu911+qciSk5FeaWL1WnV66PUaEJahhuGtgPg/1ank1/qtDiNiIiIeMrjrn0iDe3H9DzKK93EhPiTEhNsdRyR02J4pxg6xQVTXOHivVXpVscRERERD51SIfXNN98wYcIEUlJSSElJYcKECXz99dcNnU1aiGU/r486OyUKw9D6KGkZDMPghqHtAXh9aRoVlW6LE4mIiIgnPC6kXnjhBc4991xCQkK49dZbufXWWwkNDeX8889n9uzZjZFRmrllNeujNK1PWpaLeicQE+LPoYIyPt+UYXUcERER8YDH7c8ffvhhnn76aaZPn16z7ZZbbmHw4ME8/PDDTJs2rUEDSvNWXF7J+n15gBpNSMvj72PnukHJPLlgO68s2cPFvVtrVFZERKSJ8HhEKi8vj3PPPfeo7WPHjiU/P79BQknLsSoth0q3SZtIh1pAS4s0cUAyAb42thwsqOleKSIiIt7P40Lqwgsv5OOPPz5q+6effsqECRMaJJS0HDVtz9trNEpapoggP37btw0Ar3y/2+I0IiIiUlceT+3r1q0bf//73/nuu+8YNGgQACtWrGDp0qXccccdPPvsszX73nLLLQ2XVJqlZbt+bjShtufSgk0Z0o53Vu5l0bbD7MwqpENsiNWRRERE5CQ8LqReffVVIiIi2LJlC1u2bKnZHh4ezquvvlpz2zAMFVJyQvklTjZnFAAwqL0KKWm52kYHMaZrHAu2ZPLqD3t45NKeVkcSERGRk/C4kNqzZ09j5JAWaFVaDqYJ7WOCiA0NsDqOiKVuHNaeBVsy+c+6A/xpbGeigv2tjiQiIiInoAvyimVW7q5aHzWgnUajRPolR9ArMYyKSjdvr9hrdRwRERE5CY9HpEzT5MMPP2TRokVkZWXhdte+iORHH33UYOGkeVuxp6qQGtg+0uIkItYzDIMpQ9tzy7s/8vbyvfxheAoBvnarY4mIiMhxeDwiddttt3HNNdewZ88egoODCQsLq/VPpC7yS51s+Xl91ECtjxIB4Pwz4mkd7uBIcQWfrj9gdRwRERE5AY9HpN5++20++ugjzj///MbIIy3EmrQc3Ca0iw4iTuujRADwsdu4/uy2/P2LVP79/R4u79dGF+gVERHxUh6PSIWFhdG+ffvGyCItyMo9OQAMaKdpfSK/dEX/NgT7+7Ajq4jF2w9bHUdERESOw+NCaubMmcyaNYvS0tLGyCMtxIrd1eujNK1P5JdCA3y54qyqC/S++oO6pIqIiHgrjwupyy+/nNzcXGJjY+nRowdnnnlmrX8iJ1NY5uSnA/kADFCjCZGjTB7cFpsB3+/IJvVggdVxRERE5Bg8XiN13XXXsXbtWiZNmkRcXJzm74vH1qTl4jYhOSqQVmEOq+OIeJ3EiEDO69GKzzce5NUf9vDkb3tZHUlERER+xeNC6vPPP2f+/PkMGTKkMfJIC1Dd9lzro0SO74Yh7fh840E+XX+Au8Z11kWrRUREvIzHU/vatGlDaGhogzz5iy++SM+ePQkNDSU0NJRBgwbx5Zdf1txfVlbGtGnTiIqKIjg4mMsuu4zMzMxax0hPT2f8+PEEBgYSGxvLnXfeSWVlZYPkk8axYndVowmtjxI5vj5JEfRLjsDpMnlruS7QKyIi4m08LqSeeuop7rrrLtLS0ur95ImJiTz66KOsXbuWNWvWcM4553DRRRexefNmAG6//XY+++wzPvjgAxYvXkxGRgaXXnppzeNdLhfjx4+noqKCZcuW8eabb/LGG29w//331zubNI6i8spfrI9SISVyIjcMbQfAOyv3UlrhsjiNiIiI/JLHU/smTZpESUkJKSkpBAYG4uvrW+v+nJycOh/rggsuqHX773//Oy+++CIrVqwgMTGRV199lblz53LOOecA8Prrr9O1a1dWrFjBwIEDWbBgAVu2bOHrr78mLi6O3r1789BDD3H33Xczc+ZM/Pz8PH150sjWpOXgcpu0iXTQOlzro0ROZEy3eJIiA0nPKeHDdfu5ZmCy1ZFERETkZx4XUs8880wjxKgaXfrggw8oLi5m0KBBrF27FqfTyejRo2v26dKlC0lJSSxfvpyBAweyfPlyevToQVxcXM0+48aN46abbmLz5s306dPnmM9VXl5OeXl5ze2CgqquWE6nE6fTWe/XUn2MhjhWc7N8ZzYAZyVHePT1cbvdOBwO7AYYZv3/Ml99jFM9lo/dhsPhwMdmNEie+miuWZrTObIb4HA4cLvdHv9cuG5QEg99vpVXv9/N5X1aYbN5R4Mf/ZzzfjpH3k/nyLvp/Hi/xjpHdT2eYZqm2aDP7KFNmzYxaNAgysrKCA4OZu7cuZx//vnMnTuXyZMn1yp4APr378/IkSN57LHHmDp1Knv37mX+/Pk195eUlBAUFMQXX3zBeeedd8znrL4W1q/NnTuXwMDAhn2BUsvTm+ykFRlMTHHRP9bSt55Ik1DuggfW2il1GdzY2cUZkfq+ERERaUwlJSVcffXV5Ofnn7A3hMcjUr9UVlZGRUVFrW2eNqLo3Lkz69evJz8/nw8//JDrrruOxYsX1yfWSd1zzz3MmDGj5nZBQQFt2rRh7NixDdJIw+l0snDhQsaMGXPU1MeWrKSikjtWLgJMbrhoBIkRdZ/at2HDBoYNG8b0p+aQkNKl3lkM00Xbsl2kBaRgGnaPH79+8Ze8//R9XPWXZ+nRf3C989RHc83SnM5Rxq6tPH/HRJYsWUKvXp63Mt/pv51/fZ/GhvJo7jr/rEZI6Dn9nPN+OkfeT+fIu+n8eL/GOkfVs9VOxuNCqri4mLvvvpv333+fI0eOHHW/y+XZFBo/Pz86dOgAQN++fVm9ejX//Oc/ueKKK6ioqCAvL4/w8PCa/TMzM4mPjwcgPj6eVatW1TpedVe/6n2Oxd/fH39//6O2+/r6NuhJaOjjNXUb0/KodJu0DnfQLtazgtVms1FaWorL5JQ+VB+PadhP6XiVLjelpaVUus0GzXMqmnuW5nCOXCaUlpZis9lO6WfC5CHteW3pXlal5bI1s4QeiWGNkPLU6Oec99M58n46R95N58f7NcZn+LrwuGvfXXfdxbfffsuLL76Iv78///73v5k1axYJCQm89dZbHgf9NbfbTXl5OX379sXX15dvvvmm5r5t27aRnp7OoEGDABg0aBCbNm0iKyurZp+FCxcSGhpKt27d6p1FGtaK3T9fP6q9rh8l4olWYQ4u6JUAwL9/2G1xGhEREYFTGJH67LPPeOuttxgxYgSTJ09m6NChdOjQgeTkZObMmcPEiRPrfKx77rmH8847j6SkJAoLC5k7dy7fffcd8+fPJywsjClTpjBjxgwiIyMJDQ3l5ptvZtCgQQwcOBCAsWPH0q1bN6655hoef/xxDh06xH333ce0adOOOeIk1lpZff2odmp7LuKpKUPa8fGPB/h840HuPrcLCep6KSIiYimPR6RycnJo3749ULUeqrrd+ZAhQ1iyZIlHx8rKyuLaa6+lc+fOjBo1itWrVzN//nzGjBkDwNNPP82ECRO47LLLGDZsGPHx8Xz00Uc1j7fb7cybNw+73c6gQYOYNGkS1157LQ8++KCnL0saWWmFiw378wBdiFfkVJzROoyB7SOpdJu8uTzN6jgiIiItnscjUu3bt2fPnj0kJSXRpUsX3n//ffr3789nn31Way1TXbz66qsnvD8gIIDZs2cze/bs4+6TnJzMF1984dHzyum3Lj0Xp8ukVVgAbSL1l3SRU3Hj0Pas2J3D3JXp3HxOR4L969UvSEREROrB49/CkydPZsOGDQwfPpw///nPXHDBBTz//PM4nU7+8Y9/NEZGaQaq10cNbB+FYXjHdXBETrfU1NR6PT7MNGkdYudAYSX/+Hg5EzoFnfKxoqOjSUpKqlceERGRlszjQur222+v+f/Ro0eTmprKunXr6NChAz179mzQcNJ8VK+PGtBOjSak5SnIOQzApEmT6n2s4F7jiDr3Zv61eCcPTLwR3Kd2sWFHYCBbU1NVTImIiJyies8Ladu2LW3btm2AKNJclTldrN+XB2h9lLRMpUVV16MY//t76dyzb72O5TLhywMmhMXym0f/Q1KQ2+NjZKbvYs5jd5Kdna1CSkRE5BTVuZBavnw5R44cYcKECTXb3nrrLR544AGKi4u5+OKLee6559QtT46yLj2XCpebuFB/kqMCrY4jYpmohGQSO3av93HO9M1h+e4jpJUHMahXG02XFRERsUCdu/Y9+OCDbN68ueb2pk2bmDJlCqNHj+bPf/4zn332GY888kijhJSmbUV123OtjxJpED0Tw/C1GxwuKic9p8TqOCIiIi1SnQup9evXM2rUqJrb7733HgMGDOCVV15hxowZPPvss7z//vuNElKatpXVF+LV9aNEGkSAr53uCWEArEvPszaMiIhIC1XnQio3N5e4uLia24sXL+a8886ruX3WWWexb9++hk0nTV6Z08WPNeuj1GhCpKH0aROOYUB6TglZhWVWxxEREWlx6lxIxcXFsWfPHgAqKipYt24dAwcOrLm/sLAQX1/fhk8oTdr6fXlUVLqJCfGnXfSpt2oWkdpCHb50ig0BYO3eXIvTiIiItDx1LqTOP/98/vznP/P9999zzz33EBgYyNChQ2vu37hxIykpKY0SUpouXT9KpPH0TY4AYEdWEQWlTovTiIiItCx1LqQeeughfHx8GD58OK+88gqvvPIKfn5+Nfe/9tprjB07tlFCStOl60eJNJ6YEH+SIgMxTfhRa6VEREROqzq3P4+OjmbJkiXk5+cTHByM3W6vdf8HH3xAcHBwgweUpqu80sW69KopR7p+lEjjODMpnPScEn7KyKd/+0gcvvaTP0hERETqrc4jUtXCwsKOKqIAIiMja41QiWzYl095pZvoYH9SYrQ+SqQxJEUGEhPsT6XbZNP+fKvjiIiItBgeF1IidVW9PmpA+0itjxJpJIZh1KyVWr8vj0qX2+JEIiIiLYMKKWk0K/f83GhC66NEGlXH2GBCAnwodbpIPVhodRwREZEWoc5rpKRlSk9PJzs72+PHOV0mq38upELLMlm3LqdeOVJTU+v1eJHmzGYzODMpgsXbD7M2PZfurUOxaRRYRESkUdWpkDrzzDP55ptviIiI4MEHH+RPf/oTgYGBjZ1NLJaenk6Xrl0pLSnx+LH+rbsSP+kJXMV5XHzOhAbLVFRU1GDHEmlOurUKZcXuI+SXOtl1uIiOP19jSkRERBpHnQqp1NRUiouLiYiIYNasWfzhD39QIdUCZGdnU1pSwsS7nyAuybNrhG3Nt7E5H5KiQ7l89kf1zpK6ajFfvvlPysrK6n0skebIz8dGr8RwVqXlsCYtlw4xwVqbKCIi0ojqVEj17t2byZMnM2TIEEzT5Mknnzxuq/P777+/QQOK9eKSUkjs2N2jx6z+8QBQQsc2cSS2Ca93hsz0XfU+hkhz17tNOOvSc8kqLCc9p4TkKHXLFBERaSx1KqTeeOMNHnjgAebNm4dhGHz55Zf4+Bz9UMMwVEgJLrdJRl4pAK0jHBanEWk5HH52zmgdxvp9eaxOy1UhJSIi0ojqVEh17tyZ9957DwCbzcY333xDbGxsowaTpiursIxKt0mAr42oIF1bTOR06psUwab9+RzIK+VAXimtw/XHDBERkcbgcftzt9utIkpOaH/uz6NR4Q6t0RA5zYIDfOjaqqrRxOq0+nXLFBERkeM7pfbnu3bt4plnnqlpSd2tWzduvfVWUlI8a0ggzdOBnwupxAg1JBGxQt/kCDZnFLD3SAlZBWXEhgZYHUlERKTZ8XhEav78+XTr1o1Vq1bRs2dPevbsycqVK+nevTsLFy5sjIzShLjcJhn5/xuREpHTLzzQj07x1aNSuRanERERaZ48HpH685//zO23386jjz561Pa7776bMWPGNFg4aXoOF5bjdJkE+NiIDtb6KBGrnJUcwbZDhew8XEROcQWRWq8oIiLSoDwekUpNTWXKlClHbf/d737Hli1bGiSUNF3786ou3ts6QuujRKwUFexPSkxV1741WislIiLS4DwupGJiYli/fv1R29evX68mFFKr0YSIWKtf20gAtmYWkl/qtDiNiIhI8+Lx1L4bb7yRqVOnsnv3bs4++2wAli5dymOPPcaMGTMaPKA0HW63ycG8MkCNJkS8QXxoAEmRgaTnlLB2by7ndNEfu0RERBqKx4XUX//6V0JCQnjqqae45557AEhISGDmzJnccsstDR5Qmo6sonIqXG78fWxEaX2UiFc4q20E6TklbDlYwIB2kQT5n1KzVhEREfkVj3+jGobB7bffzu23305hYSEAISEhDR5Mmp4Dv5jWZ9P6KBGv0DrcQauwAA7ml7EuPZehHWOsjiQiItIseLxG6pdCQkJUREmN/bn/azQhIt7BMAzO+nmt1KYD+ZQ6XRYnEhERaR7qVUiJVHObJhnV66PUaELEq7SNCiQmxB+ny2R9ep7VcURERJoFFVLSIA4XVq2P8vOxER3ib3UcEfmFqlGpCADW78ujQoNSIiIi9aZCShrEgbyq9VEJYQFaHyXihTrEBBMd7EeFy82OQrvVcURERJo8jwopp9PJqFGj2LFjR2PlkSaq+vpRansu4p0Mw2BAuygAdhbasAVofauIiEh9eFRI+fr6snHjxsbKIk1U1fqonzv2qdGEiNdKiQkiJsSfStMgtP8lVscRERFp0jye2jdp0iReffXVxsgiTVR2UTnllW787DZig7U+SsRbGYbBwHZVHfxC+l5AfpkWS4mIiJwqj68jVVlZyWuvvcbXX39N3759CQoKqnX/P/7xjwYLJ01D9fWjWoUHYLNpfZSIN2sXHUS4n5s8HHy6rZiRZ1udSEREpGnyuJD66aefOPPMMwHYvn17rfsMNRlokf63PkrT+kS8nWEYdAtzseywjS93lnBfUTnRGkkWERHxmMeF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"},"metadata":{}}]}]}