{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8024929,"sourceType":"datasetVersion","datasetId":4729219}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport seaborn as sns\nimport cmath\nimport math\nimport time\nimport matplotlib.pyplot as plt \nimport re\nfrom numba import jit\nimport random\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-23T09:31:14.632116Z","iopub.execute_input":"2024-06-23T09:31:14.632599Z","iopub.status.idle":"2024-06-23T09:31:14.655264Z","shell.execute_reply.started":"2024-06-23T09:31:14.632565Z","shell.execute_reply":"2024-06-23T09:31:14.653854Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/new-dielectric2/dielectric_restructured_2.csv')\ndf[['epsilon_real', 'epsilon_imag']] = df['Epsilon'].str.strip('()j').str.split('+', expand=True).astype(float)\nmu_values = df['Mu'].apply(lambda x: re.findall(r'[-+]?\\d*\\.\\d+|\\d+', x))\ndf[['mu_real', 'mu_imag']] = pd.DataFrame(mu_values.tolist(), dtype=float)\ndf[['mu_real', 'mu_imag']] = df[['mu_real', 'mu_imag']].astype(float)\ndf['mu_imag'] = -1 * df['mu_imag']\ndf['epsilon_imag'] = -1 * df['epsilon_imag']\ndf.drop(['Epsilon'], axis=1, inplace=True)\ndf.drop(['Mu'], axis=1, inplace=True)\n\ndf['Thickness(m)'] = df['Thickness(mm)'] / 1e3\ndf['Thickness(m)'] = df['Thickness(m)'].clip(0.00005, 0.0005).round(6)  # Ensure thickness is within the desired range\ndf.drop(['Thickness(mm)'], axis=1, inplace=True)\n\ndf['Frequency'] = df['Frequency(GHz)'] * 1e9\ndf.drop(['Frequency(GHz)'], axis=1, inplace=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.657855Z","iopub.execute_input":"2024-06-23T09:31:14.658335Z","iopub.status.idle":"2024-06-23T09:31:14.731022Z","shell.execute_reply.started":"2024-06-23T09:31:14.658291Z","shell.execute_reply":"2024-06-23T09:31:14.729873Z"},"trusted":true},"execution_count":78,"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"      S.No.  Material ID  epsilon_real  epsilon_imag  mu_real  mu_imag  \\\n0         1            1      320.6301     -495.4431   1.0000    -0.00   \n1         2            1      320.6301     -495.4431   1.0000    -0.00   \n2         3            1      320.6301     -495.4431   1.0000    -0.00   \n3         4            1      320.6301     -495.4431   1.0000    -0.00   \n4         5            1      320.6301     -495.4431   1.0000    -0.00   \n...     ...          ...           ...           ...      ...      ...   \n1495   1496            3        3.1563       -0.3053   0.9768    -0.09   \n1496   1497            3        3.1563       -0.3053   0.9768    -0.09   \n1497   1498            3        3.1563       -0.3053   0.9768    -0.09   \n1498   1499            3        3.1563       -0.3053   0.9768    -0.09   \n1499   1500            3        3.1563       -0.3053   0.9768    -0.09   \n\n      Thickness(m)     Frequency  \n0          0.00005  8.000000e+09  \n1          0.00010  8.000000e+09  \n2          0.00015  8.000000e+09  \n3          0.00020  8.000000e+09  \n4          0.00025  8.000000e+09  \n...            ...           ...  \n1495       0.00050  1.200000e+10  \n1496       0.00050  1.200000e+10  \n1497       0.00050  1.200000e+10  \n1498       0.00050  1.200000e+10  \n1499       0.00050  1.200000e+10  \n\n[1500 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>S.No.</th>\n      <th>Material ID</th>\n      <th>epsilon_real</th>\n      <th>epsilon_imag</th>\n      <th>mu_real</th>\n      <th>mu_imag</th>\n      <th>Thickness(m)</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00005</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00010</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00015</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00020</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00025</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1495</th>\n      <td>1496</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1496</th>\n      <td>1497</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1497</th>\n      <td>1498</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1498</th>\n      <td>1499</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1499</th>\n      <td>1500</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00050</td>\n      <td>1.200000e+10</td>\n    </tr>\n  </tbody>\n</table>\n<p>1500 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"population_size = 6000  # Increase population size\nnum_generations = 200    # Increase number of generations\n\ncrossover_rate = 0.8     # Experiment with crossover rate\nmutation_rate = 0.3\nnum_layers = 6\n\n# Air properties (Assuming you have these variables defined)\nair_id = 0\nair_thickness = 0\nair_eps = 1+0j\nair_mu = 1+0j\n\n# Frequencies\nfrequencies = [8e9, 9e9, 10e9, 11e9, 12e9]","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.732291Z","iopub.execute_input":"2024-06-23T09:31:14.732666Z","iopub.status.idle":"2024-06-23T09:31:14.740202Z","shell.execute_reply.started":"2024-06-23T09:31:14.732608Z","shell.execute_reply":"2024-06-23T09:31:14.738951Z"},"trusted":true},"execution_count":79,"outputs":[]},{"cell_type":"code","source":"df_air = pd.DataFrame({\n    'Material ID': [air_id] * len(frequencies),\n    'Frequency': frequencies,\n    'epsilon_real': [air_eps.real] * len(frequencies),\n    'epsilon_imag': [air_eps.imag] * len(frequencies),\n    'mu_real': [air_mu.real] * len(frequencies),\n    'mu_imag': [air_mu.imag] * len(frequencies),\n    'Thickness(m)': [air_thickness] * len(frequencies)\n})\n\ndf = pd.concat([df, df_air], ignore_index=True)\n\n# Create a dictionary for frequency-specific properties\nmaterial_properties = {}\nfor _, row in df.iterrows():\n    material_id = row['Material ID']\n    frequency = row['Frequency']\n    if material_id not in material_properties:\n        material_properties[material_id] = {}\n    material_properties[material_id][frequency] = {\n        'epsilon': row['epsilon_real'] + 1j * row['epsilon_imag'],\n        'mu': row['mu_real'] + 1j * row['mu_imag'],\n        'thickness': row['Thickness(m)']\n    }","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.742878Z","iopub.execute_input":"2024-06-23T09:31:14.743399Z","iopub.status.idle":"2024-06-23T09:31:14.896738Z","shell.execute_reply.started":"2024-06-23T09:31:14.743366Z","shell.execute_reply":"2024-06-23T09:31:14.895759Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"def tmm(f, d, eps, mu):\n    \n    c = 3e8  # Speed of light in m/s\n    \n    M_total = np.identity(2, dtype=complex)\n    \n    for i in range(0, len(eps)-1):\n        k = (2 * np.pi * f / c) * np.sqrt(eps[i] * mu[i])\n        \n        M_propagation = np.array([[np.exp(-1j * k * d[i]), 0], [0, np.exp(1j * k * d[i])]], dtype=complex)\n        \n        Z = np.sqrt(mu[i] / eps[i])\n        Z_next = np.sqrt(mu[i+1] / eps[i+1])\n        \n        R = (Z - Z_next) / (Z_next + Z)\n        T = (2 * Z) / (Z_next + Z)\n        \n        # Check if T is close to zero, and handle the division by zero case\n        #if np.abs(T) < 1e-6:\n            #M_boundary = 0.5 * np.array([[1 + (Z / Z_next), 1 - (Z / Z_next)], [1 - (Z / Z_next), 1 + (Z / Z_next)]], dtype=complex)\n        #else:\n        M_boundary = np.array([[1, R], [R, 1]], dtype=complex)\n        \n        #M_boundary_inv = np.linalg.inv(M_boundary)\n        \n        M_total = (1/T) * np.matmul(np.matmul(M_boundary, M_propagation), M_total)\n    \n    R1 = -1 * (M_total[1, 0] / M_total[1, 1])  #if abs(M_total[0, 0]) > 1e-6 else 1.0\n    T1 = (M_total[0,0] + (M_total[0,1]*R1)) #if abs(M_total[0, 0]) > 1e-6 else 0.0 \n    \n    R2 = np.abs(R1)**2\n    T2 = np.abs(T1)**2\n    return R2, T2\n\ndef calculate_shielding_effectiveness(R2,T2):\n    emi_se = 10*np.log10(1/(np.abs(T2)))\n    return emi_se\n\ndef calculate_absorption(R2,T2):\n    absorption = 1 - (R2 + T2)\n    return absorption\n\nf = 8e9\nd = [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0]\neps = [(1+0j), (44.0257-58.6855j), (3.3595-0.03338j), (320.6301-495.4431j), (44.0257-58.6855j), (3.3595-0.03338j), (1+0j)]\nmu = [(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0j), (0.883-0.0324j), (1+0j)]\n\n\nR, T = tmm(f, d, eps, mu)\nshielding_effectiveness = calculate_shielding_effectiveness(R,T)\nabsorption = calculate_absorption(R,T)\n\nprint(\"reflection:\", R)\nprint(\"transmission:\", T)\nprint(\"shielding effectiveness:\", shielding_effectiveness)\nprint(\"absorption:\", absorption)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.898431Z","iopub.execute_input":"2024-06-23T09:31:14.898819Z","iopub.status.idle":"2024-06-23T09:31:14.918133Z","shell.execute_reply.started":"2024-06-23T09:31:14.898771Z","shell.execute_reply":"2024-06-23T09:31:14.916890Z"},"trusted":true},"execution_count":81,"outputs":[{"name":"stdout","text":"reflection: 0.8107749943432702\ntransmission: 0.005069576408021708\nshielding effectiveness: 22.950283269278362\nabsorption: 0.1841554292487081\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_initial_population(material_properties, frequencies, population_size, num_layers):\n    population = []\n    for _ in range(population_size):\n        structure = [{'Material ID': air_id, 'Frequency': frequencies[0]}]  # First layer is air\n        for _ in range(num_layers - 2):\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while structure[-1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = np.random.uniform(0.00005, 0.0005)  # Random thickness between 0.00005 to 0.0005\n            structure.append({'Material ID': material_id, 'Frequency': frequencies[1], 'Thickness(m)': thickness})\n        structure.append({'Material ID': air_id, 'Frequency': frequencies[1]})  # Last layer is air\n        population.append(structure)\n    return population\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.919673Z","iopub.execute_input":"2024-06-23T09:31:14.920545Z","iopub.status.idle":"2024-06-23T09:31:14.935405Z","shell.execute_reply.started":"2024-06-23T09:31:14.920512Z","shell.execute_reply":"2024-06-23T09:31:14.933973Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"code","source":"def evaluate_fitness(structure, frequencies):\n    total_absorption = 0\n    \n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        E = calculate_shielding_effectiveness(R,T)\n        \n        total_absorption += A\n    \n    average_absorption = total_absorption / len(frequencies)\n    \n    return average_absorption","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.936913Z","iopub.execute_input":"2024-06-23T09:31:14.937300Z","iopub.status.idle":"2024-06-23T09:31:14.950195Z","shell.execute_reply.started":"2024-06-23T09:31:14.937268Z","shell.execute_reply":"2024-06-23T09:31:14.949042Z"},"trusted":true},"execution_count":83,"outputs":[]},{"cell_type":"code","source":"def select_parents(population, fitnesses, num_parents):\n    parents = random.choices(population, weights=fitnesses, k=num_parents)\n    return parents\n\n# Crossover\ndef crossover(parents, crossover_rate, frequencies):\n    offspring = []\n    for _ in range(len(parents) // 2):\n        parent1 = random.choice(parents)\n        parent2 = random.choice(parents)\n        if random.random() < crossover_rate:\n            crossover_point = random.randint(1, len(parent1) - 2)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness(m)': np.random.uniform(0.00005, 0.0005)}]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies), 'Thickness(m)': np.random.uniform(0.00005, 0.0005)}]\n            offspring.append(child1)\n            offspring.append(child2)\n        else:\n            offspring.append(parent1)\n            offspring.append(parent2)\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.951527Z","iopub.execute_input":"2024-06-23T09:31:14.951908Z","iopub.status.idle":"2024-06-23T09:31:14.963849Z","shell.execute_reply.started":"2024-06-23T09:31:14.951878Z","shell.execute_reply":"2024-06-23T09:31:14.962660Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"\"\"\"def local_search(structure, material_properties, frequencies):\n    improved_structure = structure.copy()\n    for i in range(1, len(improved_structure) - 1):\n        # Check if both current and next layers are not air\n        if improved_structure[i]['Material ID'] != air_id and improved_structure[i + 1]['Material ID'] != air_id:\n            # Swap adjacent layers\n            improved_structure[i], improved_structure[i + 1] = improved_structure[i + 1], improved_structure[i]\n            \n            # Adjust thickness randomly within a small range\n            new_thickness = np.random.uniform(0.00005, 0.0005)\n            improved_structure[i]['Thickness(m)'] = new_thickness\n\n    return improved_structure\n\n\"\"\"\n# Example usage within genetic algorithm\ndef mutate(offspring, mutation_rate, material_properties, frequencies):\n    for child in offspring:\n        if random.random() < mutation_rate:\n            mutation_point = random.randint(1, len(child) - 2)\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while child[mutation_point - 1]['Material ID'] == material_id or child[mutation_point + 1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = np.random.uniform(0.00005, 0.0005)\n            child[mutation_point] = {'Material ID': material_id, 'Frequency': random.choice(frequencies), 'Thickness(m)': thickness}\n            \n            # Apply local search to mutated child\n            child = local_search(child, material_properties, frequencies)\n    \n    return offspring\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.965112Z","iopub.execute_input":"2024-06-23T09:31:14.965449Z","iopub.status.idle":"2024-06-23T09:31:14.980630Z","shell.execute_reply.started":"2024-06-23T09:31:14.965422Z","shell.execute_reply":"2024-06-23T09:31:14.979493Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"code","source":"def evolution_strategy_mutation(child, mutation_rate, material_properties, frequencies):\n    mutated_child = child.copy()\n    for i in range(1, len(mutated_child) - 1):\n        if random.random() < mutation_rate:\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while mutated_child[i - 1]['Material ID'] == material_id or mutated_child[i + 1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = np.random.uniform(0.00005, 0.0005)\n            mutated_child[i] = {'Material ID': material_id, 'Frequency': random.choice(frequencies), 'Thickness(m)': thickness}\n    \n    return mutated_child\n\ndef genetic_algorithm_with_evolution_strategy(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate):\n    population = generate_initial_population(material_properties, frequencies, population_size, num_layers)\n    best_fitness = 0.0\n    best_structure = None\n    \n    for generation in range(num_generations):\n        fitnesses = [evaluate_fitness(structure, frequencies) for structure in population]\n        max_fitness = max(fitnesses)\n        print(f\"Generation {generation}: Best Fitness = {max_fitness}\")\n        \n        if max_fitness > best_fitness:\n            best_fitness = max_fitness\n            best_structure = population[fitnesses.index(max_fitness)]\n        \n        if max_fitness > 0.80:  # Adjust threshold as needed\n            break\n        \n        parents = select_parents(population, fitnesses, population_size // 2)\n        offspring = crossover(parents, crossover_rate, frequencies)\n        \n        # Apply evolution strategy mutation\n        offspring = [evolution_strategy_mutation(child, mutation_rate, material_properties, frequencies) for child in offspring]\n        \n        population = offspring\n    \n    return population, fitnesses\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:14.984596Z","iopub.execute_input":"2024-06-23T09:31:14.985084Z","iopub.status.idle":"2024-06-23T09:31:15.000578Z","shell.execute_reply.started":"2024-06-23T09:31:14.985052Z","shell.execute_reply":"2024-06-23T09:31:14.999292Z"},"trusted":true},"execution_count":86,"outputs":[]},{"cell_type":"code","source":"population, fitnesses = genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate)\n\n# Filter structures with absorption > 0.75\nfiltered_structures = [structure for structure, fitness in zip(population, fitnesses) if fitness > 0.80]","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:15.002200Z","iopub.execute_input":"2024-06-23T09:31:15.002695Z","iopub.status.idle":"2024-06-23T09:31:26.007768Z","shell.execute_reply.started":"2024-06-23T09:31:15.002658Z","shell.execute_reply":"2024-06-23T09:31:26.006073Z"},"trusted":true},"execution_count":87,"outputs":[{"name":"stdout","text":"Generation 0: Best Fitness = 0.5081224250436555\nGeneration 1: Best Fitness = 0.5081224250436555\nGeneration 2: Best Fitness = 0.5081224250436555\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[87], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m population, fitnesses \u001b[38;5;241m=\u001b[39m \u001b[43mgenetic_algorithm\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaterial_properties\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfrequencies\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpopulation_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_layers\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_generations\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcrossover_rate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmutation_rate\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# Filter structures with absorption > 0.75\u001b[39;00m\n\u001b[1;32m      4\u001b[0m filtered_structures \u001b[38;5;241m=\u001b[39m [structure \u001b[38;5;28;01mfor\u001b[39;00m structure, fitness \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(population, fitnesses) \u001b[38;5;28;01mif\u001b[39;00m fitness \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0.80\u001b[39m]\n","Cell \u001b[0;32mIn[75], line 7\u001b[0m, in \u001b[0;36mgenetic_algorithm\u001b[0;34m(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate)\u001b[0m\n\u001b[1;32m      4\u001b[0m best_structure \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m generation \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(num_generations):\n\u001b[0;32m----> 7\u001b[0m     fitnesses \u001b[38;5;241m=\u001b[39m [evaluate_fitness(structure, frequencies) \u001b[38;5;28;01mfor\u001b[39;00m structure \u001b[38;5;129;01min\u001b[39;00m population]\n\u001b[1;32m      8\u001b[0m     max_fitness \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmax\u001b[39m(fitnesses)\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mGeneration \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mgeneration\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: Best Fitness = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmax_fitness\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n","Cell \u001b[0;32mIn[75], line 7\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      4\u001b[0m best_structure \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m generation \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(num_generations):\n\u001b[0;32m----> 7\u001b[0m     fitnesses \u001b[38;5;241m=\u001b[39m [\u001b[43mevaluate_fitness\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstructure\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfrequencies\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m structure \u001b[38;5;129;01min\u001b[39;00m population]\n\u001b[1;32m      8\u001b[0m     max_fitness \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmax\u001b[39m(fitnesses)\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mGeneration \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mgeneration\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m: Best Fitness = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmax_fitness\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n","Cell \u001b[0;32mIn[83], line 8\u001b[0m, in \u001b[0;36mevaluate_fitness\u001b[0;34m(structure, frequencies)\u001b[0m\n\u001b[1;32m      6\u001b[0m eps \u001b[38;5;241m=\u001b[39m [material_properties[layer[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMaterial ID\u001b[39m\u001b[38;5;124m'\u001b[39m]][f][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mepsilon\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;28;01mfor\u001b[39;00m layer \u001b[38;5;129;01min\u001b[39;00m structure]\n\u001b[1;32m      7\u001b[0m mu \u001b[38;5;241m=\u001b[39m [material_properties[layer[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMaterial ID\u001b[39m\u001b[38;5;124m'\u001b[39m]][f][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmu\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;28;01mfor\u001b[39;00m layer \u001b[38;5;129;01min\u001b[39;00m structure]\n\u001b[0;32m----> 8\u001b[0m R, T \u001b[38;5;241m=\u001b[39m \u001b[43mtmm\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43meps\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmu\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      9\u001b[0m A \u001b[38;5;241m=\u001b[39m calculate_absorption(R,T)\n\u001b[1;32m     10\u001b[0m E \u001b[38;5;241m=\u001b[39m calculate_shielding_effectiveness(R,T)\n","Cell \u001b[0;32mIn[81], line 12\u001b[0m, in \u001b[0;36mtmm\u001b[0;34m(f, d, eps, mu)\u001b[0m\n\u001b[1;32m      8\u001b[0m k \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m f \u001b[38;5;241m/\u001b[39m c) \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39msqrt(eps[i] \u001b[38;5;241m*\u001b[39m mu[i])\n\u001b[1;32m     10\u001b[0m M_propagation \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([[np\u001b[38;5;241m.\u001b[39mexp(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39mj \u001b[38;5;241m*\u001b[39m k \u001b[38;5;241m*\u001b[39m d[i]), \u001b[38;5;241m0\u001b[39m], [\u001b[38;5;241m0\u001b[39m, np\u001b[38;5;241m.\u001b[39mexp(\u001b[38;5;241m1\u001b[39mj \u001b[38;5;241m*\u001b[39m k \u001b[38;5;241m*\u001b[39m d[i])]], dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mcomplex\u001b[39m)\n\u001b[0;32m---> 12\u001b[0m Z \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msqrt\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmu\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m/\u001b[39;49m\u001b[43m \u001b[49m\u001b[43meps\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m Z_next \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39msqrt(mu[i\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m/\u001b[39m eps[i\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m])\n\u001b[1;32m     15\u001b[0m R \u001b[38;5;241m=\u001b[39m (Z \u001b[38;5;241m-\u001b[39m Z_next) \u001b[38;5;241m/\u001b[39m (Z_next \u001b[38;5;241m+\u001b[39m Z)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"filtered_data = []\nfor structure in filtered_structures:\n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        emi_se = calculate_shielding_effectiveness(R,T)\n        filtered_data.append({\n            'Frequency': f,\n            'Material IDs': [layer['Material ID'] for layer in structure],\n            'Thickness': d,\n            'Epsilon': eps,\n            'Mu': mu,\n            'Reflection Coefficient': R,\n            'Transmission Coefficient': T,\n            'EMI Shielding Effectiveness': emi_se,\n            'Absorption': A\n        })\n\nfiltered_df = pd.DataFrame(filtered_data)\n\n# Print filtered DataFrame\nfiltered_df","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:26.008863Z","iopub.status.idle":"2024-06-23T09:31:26.009406Z","shell.execute_reply.started":"2024-06-23T09:31:26.009131Z","shell.execute_reply":"2024-06-23T09:31:26.009155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"filtered_df.to_csv('multi-combination.csv', encoding='utf-8')","metadata":{"execution":{"iopub.status.busy":"2024-06-23T09:31:26.011529Z","iopub.status.idle":"2024-06-23T09:31:26.012104Z","shell.execute_reply.started":"2024-06-23T09:31:26.011795Z","shell.execute_reply":"2024-06-23T09:31:26.011834Z"},"trusted":true},"execution_count":null,"outputs":[]}]}