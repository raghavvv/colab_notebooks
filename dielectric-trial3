{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8024929,"sourceType":"datasetVersion","datasetId":4729219}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport seaborn as sns\nimport cmath\nimport math\nimport time\nimport matplotlib.pyplot as plt \nimport re\nfrom numba import jit\nimport random\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-23T20:56:49.525353Z","iopub.execute_input":"2024-06-23T20:56:49.525803Z","iopub.status.idle":"2024-06-23T20:56:49.545640Z","shell.execute_reply.started":"2024-06-23T20:56:49.525773Z","shell.execute_reply":"2024-06-23T20:56:49.543851Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stdout","text":"/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/new-dielectric2/dielectric_restructured_2.csv')\ndf[['epsilon_real', 'epsilon_imag']] = df['Epsilon'].str.strip('()j').str.split('+', expand=True).astype(float)\nmu_values = df['Mu'].apply(lambda x: re.findall(r'[-+]?\\d*\\.\\d+|\\d+', x))\ndf[['mu_real', 'mu_imag']] = pd.DataFrame(mu_values.tolist(), dtype=float)\ndf[['mu_real', 'mu_imag']] = df[['mu_real', 'mu_imag']].astype(float)\ndf['mu_imag'] = -1 * df['mu_imag']\ndf['epsilon_imag'] = -1 * df['epsilon_imag']\ndf.drop(['Epsilon'], axis=1, inplace=True)\ndf.drop(['Mu'], axis=1, inplace=True)\n\ndf['Thickness(m)'] = df['Thickness(mm)'] / 1e3\ndf['Thickness(m)'] = df['Thickness(m)'].clip(0.00005, 0.0005).round(6)  # Ensure thickness is within the desired range\ndf.drop(['Thickness(mm)'], axis=1, inplace=True)\n\ndf['Frequency'] = df['Frequency(GHz)'] * 1e9\ndf.drop(['Frequency(GHz)'], axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T07:06:26.791330Z","iopub.execute_input":"2024-06-24T07:06:26.792097Z","iopub.status.idle":"2024-06-24T07:06:27.204269Z","shell.execute_reply.started":"2024-06-24T07:06:26.792060Z","shell.execute_reply":"2024-06-24T07:06:27.202916Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      2\u001b[0m df[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mepsilon_real\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mepsilon_imag\u001b[39m\u001b[38;5;124m'\u001b[39m]] \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEpsilon\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mstr\u001b[38;5;241m.\u001b[39mstrip(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m()j\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mstr\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m+\u001b[39m\u001b[38;5;124m'\u001b[39m, expand\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mfloat\u001b[39m)\n\u001b[1;32m      3\u001b[0m mu_values \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMu\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: re\u001b[38;5;241m.\u001b[39mfindall(\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m[-+]?\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124md*\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124md+|\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124md+\u001b[39m\u001b[38;5;124m'\u001b[39m, x))\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"],"ename":"NameError","evalue":"name 'pd' is not defined","output_type":"error"}]},{"cell_type":"code","source":"\n# Define parameters\npopulation_size = 1500\nnum_layers = 7  # Including air layers at both ends\nnum_generations = 100\ncrossover_rate = 0.8\nmutation_rate = 0.2\nfrequencies = [8e9, 9e9, 10e9, 11e9, 12e9]\nmaterial_ids = df['Material ID'].unique().tolist()\nthickness_values = df['Thickness(m)'].unique().tolist()\nair_id = 0\nair_thickness = 0\nair_eps = 1+0j\nair_mu = 1+0j","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.600240Z","iopub.execute_input":"2024-06-23T20:56:49.600611Z","iopub.status.idle":"2024-06-23T20:56:49.608826Z","shell.execute_reply.started":"2024-06-23T20:56:49.600575Z","shell.execute_reply":"2024-06-23T20:56:49.607224Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"df_air = pd.DataFrame({\n    'Material ID': [air_id] * len(frequencies),\n    'Frequency': frequencies,\n    'epsilon_real': [air_eps.real] * len(frequencies),\n    'epsilon_imag': [air_eps.imag] * len(frequencies),\n    'mu_real': [air_mu.real] * len(frequencies),\n    'mu_imag': [air_mu.imag] * len(frequencies),\n    'Thickness(m)': [air_thickness] * len(frequencies)\n})\n\ndf = pd.concat([df, df_air], ignore_index=True)\n\n# Create a dictionary for frequency-specific properties\nmaterial_properties = {}\nfor _, row in df.iterrows():\n    material_id = row['Material ID']\n    frequency = row['Frequency']\n    if material_id not in material_properties:\n        material_properties[material_id] = {}\n    material_properties[material_id][frequency] = {\n        'epsilon': row['epsilon_real'] + 1j * row['epsilon_imag'],\n        'mu': row['mu_real'] + 1j * row['mu_imag'],\n        'thickness': row['Thickness(m)']\n    }","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.611878Z","iopub.execute_input":"2024-06-23T20:56:49.612425Z","iopub.status.idle":"2024-06-23T20:56:49.746253Z","shell.execute_reply.started":"2024-06-23T20:56:49.612353Z","shell.execute_reply":"2024-06-23T20:56:49.745097Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"def tmm(f, d, eps, mu):\n    \n    c = 3e8  # Speed of light in m/s\n    \n    M_total = np.identity(2, dtype=complex)\n    \n    for i in range(0, len(eps)-1):\n        k = (2 * np.pi * f / c) * np.sqrt(eps[i] * mu[i])\n        \n        M_propagation = np.array([[np.exp(-1j * k * d[i]), 0], [0, np.exp(1j * k * d[i])]], dtype=complex)\n        \n        Z = np.sqrt(mu[i] / eps[i])\n        Z_next = np.sqrt(mu[i+1] / eps[i+1])\n        \n        R = (Z - Z_next) / (Z_next + Z)\n        T = (2 * Z) / (Z_next + Z)\n        \n        # Check if T is close to zero, and handle the division by zero case\n        #if np.abs(T) < 1e-6:\n            #M_boundary = 0.5 * np.array([[1 + (Z / Z_next), 1 - (Z / Z_next)], [1 - (Z / Z_next), 1 + (Z / Z_next)]], dtype=complex)\n        #else:\n        M_boundary = np.array([[1, R], [R, 1]], dtype=complex)\n        \n        #M_boundary_inv = np.linalg.inv(M_boundary)\n        \n        M_total = (1/T) * np.matmul(np.matmul(M_boundary, M_propagation), M_total)\n    \n    R1 = -1 * (M_total[1, 0] / M_total[1, 1])  #if abs(M_total[0, 0]) > 1e-6 else 1.0\n    T1 = (M_total[0,0] + (M_total[0,1]*R1)) #if abs(M_total[0, 0]) > 1e-6 else 0.0 \n    \n    R2 = np.abs(R1)**2\n    T2 = np.abs(T1)**2\n    return R2, T2\n\ndef calculate_shielding_effectiveness(R2,T2):\n    emi_se = 10*np.log10(1/(np.abs(T2)))\n    return emi_se\n\ndef calculate_absorption(R2,T2):\n    absorption = 1 - (R2 + T2)\n    return absorption\n\nf = 8e9\nd = [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0]\neps = [(1+0j), (44.0257-58.6855j), (3.3595-0.03338j), (320.6301-495.4431j), (44.0257-58.6855j), (3.3595-0.03338j), (1+0j)]\nmu = [(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0j), (0.883-0.0324j), (1+0j)]\n\n\nR, T = tmm(f, d, eps, mu)\nshielding_effectiveness = calculate_shielding_effectiveness(R,T)\nabsorption = calculate_absorption(R,T)\n\nprint(\"reflection:\", R)\nprint(\"transmission:\", T)\nprint(\"shielding effectiveness:\", shielding_effectiveness)\nprint(\"absorption:\", absorption)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.747693Z","iopub.execute_input":"2024-06-23T20:56:49.748260Z","iopub.status.idle":"2024-06-23T20:56:49.765090Z","shell.execute_reply.started":"2024-06-23T20:56:49.748232Z","shell.execute_reply":"2024-06-23T20:56:49.763611Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"reflection: 0.8107749943432702\ntransmission: 0.005069576408021708\nshielding effectiveness: 22.950283269278362\nabsorption: 0.1841554292487081\n","output_type":"stream"}]},{"cell_type":"code","source":"def initialize_population(population_size, num_layers, material_ids, thickness_values):\n    population = []\n    for _ in range(population_size):\n        structure = [{'Material ID': 0, 'Thickness': random.choice(thickness_values)}]  # First layer (air)\n        for _ in range(num_layers - 2):\n            structure.append({\n                'Material ID': random.choice(material_ids),\n                'Thickness': random.choice(thickness_values)\n            })\n        structure.append({'Material ID': 0, 'Thickness': random.choice(thickness_values)})  # Last layer (air)\n        population.append(structure)\n    return population","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.766765Z","iopub.execute_input":"2024-06-23T20:56:49.767187Z","iopub.status.idle":"2024-06-23T20:56:49.781256Z","shell.execute_reply.started":"2024-06-23T20:56:49.767155Z","shell.execute_reply":"2024-06-23T20:56:49.779727Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"def evaluate_fitness(structure, frequencies, df):\n    total_absorption = 0\n    total_shielding_effectiveness = 0\n    \n    for freq in frequencies:\n        eps_values = []\n        mu_values = []\n        thicknesses = [layer['Thickness'] for layer in structure]\n        \n        for layer in structure:\n            material_id = layer['Material ID']\n            if material_id == 0:  # Air\n                eps_values.append(1 + 0j)\n                mu_values.append(1 + 0j)\n            else:\n                selected_data = df[(df['Material ID'] == material_id) & (df['Frequency'] == freq)].iloc[0]\n                eps_real = selected_data['epsilon_real']\n                eps_imag = selected_data['epsilon_imag']\n                mu_real = selected_data['mu_real']\n                mu_imag = selected_data['mu_imag']\n                eps_values.append(eps_real + 1j * eps_imag)\n                mu_values.append(mu_real + 1j * mu_imag)\n        \n        R, T = tmm(freq, thicknesses, eps_values, mu_values)\n        absorption = calculate_absorption(R, T)\n        emi_se = calculate_shielding_effectiveness(R, T)\n        \n        total_absorption += absorption\n        total_shielding_effectiveness += emi_se\n    \n    average_absorption = total_absorption / len(frequencies)\n    average_shielding_effectiveness = total_shielding_effectiveness / len(frequencies)\n    \n    fitness = average_absorption + average_shielding_effectiveness\n    \n    return fitness","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.783469Z","iopub.execute_input":"2024-06-23T20:56:49.783950Z","iopub.status.idle":"2024-06-23T20:56:49.799581Z","shell.execute_reply.started":"2024-06-23T20:56:49.783912Z","shell.execute_reply":"2024-06-23T20:56:49.798202Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"def single_point_crossover(parent1, parent2, crossover_rate):\n    if random.random() < crossover_rate:\n        crossover_point = random.randint(1, len(parent1) - 2)  # Avoid the first and last layers (air)\n        child1 = parent1[:crossover_point] + parent2[crossover_point:]\n        child2 = parent2[:crossover_point] + parent1[crossover_point:]\n        #print(f\"Debug: crossover_point={crossover_point}, len(child1)={len(child1)}, len(child2)={len(child2)}\")  # Debugging statement\n    else:\n        child1, child2 = parent1, parent2\n    return child1, child2\n\ndef crossover_population(parents, crossover_rate):\n    offspring = []\n    for i in range(0, len(parents), 2):\n        parent1 = parents[i]\n        parent2 = parents[i + 1] if (i + 1) < len(parents) else parents[0]\n        child1, child2 = single_point_crossover(parent1, parent2, crossover_rate)\n        offspring.append(child1)\n        offspring.append(child2)\n    return offspring\n\ndef mutate(structure, mutation_rate, material_ids, thickness_values):\n    for layer in structure[1:-1]:  # Exclude the first and last layers (air)\n        if random.random() < mutation_rate:\n            if random.random() < 0.5:\n                layer['Material ID'] = random.choice(material_ids)\n            else:\n                layer['Thickness'] = random.choice(thickness_values)\n    return structure\n\ndef mutate_population(population, mutation_rate, material_ids, thickness_values):\n    mutated_population = []\n    for structure in population:\n        mutated_structure = mutate(structure, mutation_rate, material_ids, thickness_values)\n        mutated_population.append(mutated_structure)\n    return mutated_population\n\ndef select_parents(population, fitnesses, num_parents):\n    sorted_population = [x for _, x in sorted(zip(fitnesses, population), key=lambda pair: pair[0], reverse=True)]\n    return sorted_population[:num_parents]\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.801457Z","iopub.execute_input":"2024-06-23T20:56:49.801792Z","iopub.status.idle":"2024-06-23T20:56:49.821260Z","shell.execute_reply.started":"2024-06-23T20:56:49.801764Z","shell.execute_reply":"2024-06-23T20:56:49.819318Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"def genetic_algorithm(df, population_size, num_layers, num_generations, crossover_rate, mutation_rate, material_ids, thickness_values, frequencies):\n    population = initialize_population(population_size, num_layers, material_ids, thickness_values)\n    \n    for generation in range(num_generations):\n        fitnesses = [evaluate_fitness(structure, frequencies, df) for structure in population]\n        print(f\"Generation {generation}: Best Fitness = {max(fitnesses)}\")  # Debugging statement\n        \n        parents = select_parents(population, fitnesses, population_size // 2)\n        offspring = crossover_population(parents, crossover_rate)\n        population = mutate_population(offspring, mutation_rate, material_ids, thickness_values)\n    \n    final_fitnesses = [evaluate_fitness(structure, frequencies, df) for structure in population]\n    return population, final_fitnesses\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.824077Z","iopub.execute_input":"2024-06-23T20:56:49.824791Z","iopub.status.idle":"2024-06-23T20:56:49.838236Z","shell.execute_reply.started":"2024-06-23T20:56:49.824752Z","shell.execute_reply":"2024-06-23T20:56:49.836762Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"population, fitnesses = genetic_algorithm(df, population_size, num_layers, num_generations, crossover_rate, mutation_rate, material_ids, thickness_values, frequencies)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:49.842325Z","iopub.execute_input":"2024-06-23T20:56:49.843065Z","iopub.status.idle":"2024-06-23T21:20:43.718579Z","shell.execute_reply.started":"2024-06-23T20:56:49.843027Z","shell.execute_reply":"2024-06-23T21:20:43.717440Z"},"trusted":true},"execution_count":73,"outputs":[{"name":"stdout","text":"Generation 0: Best Fitness = 48.4521629996638\nGeneration 1: Best Fitness = 52.63384402789906\nGeneration 2: Best Fitness = 52.63384402804066\nGeneration 3: Best Fitness = 52.7349426886424\nGeneration 4: Best Fitness = 52.8184554271562\nGeneration 5: Best Fitness = 54.83004426777475\nGeneration 6: Best Fitness = 55.79163777851107\nGeneration 7: Best Fitness = 55.79163777851107\nGeneration 8: Best Fitness = 54.00943230529069\nGeneration 9: Best Fitness = 52.4754738932037\nGeneration 10: Best Fitness = 54.03503868764353\nGeneration 11: Best Fitness = 54.035038687696385\nGeneration 12: Best Fitness = 53.15673663828132\nGeneration 13: Best Fitness = 53.15673663828132\nGeneration 14: Best Fitness = 52.27842108383611\nGeneration 15: Best Fitness = 52.27842108383611\nGeneration 16: Best Fitness = 53.55701950912295\nGeneration 17: Best Fitness = 54.913337207301915\nGeneration 18: Best Fitness = 56.66994343334217\nGeneration 19: Best Fitness = 57.54825589902696\nGeneration 20: Best Fitness = 55.79163777794413\nGeneration 21: Best Fitness = 54.03503868738725\nGeneration 22: Best Fitness = 54.03503868738725\nGeneration 23: Best Fitness = 52.73494268819835\nGeneration 24: Best Fitness = 56.669943433152696\nGeneration 25: Best Fitness = 55.79163777790002\nGeneration 26: Best Fitness = 54.91333720743364\nGeneration 27: Best Fitness = 55.79163777809261\nGeneration 28: Best Fitness = 54.91333720758412\nGeneration 29: Best Fitness = 51.40007543559831\nGeneration 30: Best Fitness = 56.66994343299208\nGeneration 31: Best Fitness = 56.66994343339422\nGeneration 32: Best Fitness = 57.548255898792014\nGeneration 33: Best Fitness = 57.548255898792014\nGeneration 34: Best Fitness = 52.09291800712405\nGeneration 35: Best Fitness = 53.15673663837565\nGeneration 36: Best Fitness = 52.27842108368477\nGeneration 37: Best Fitness = 53.15673663818439\nGeneration 38: Best Fitness = 54.009432305254286\nGeneration 39: Best Fitness = 53.50922954987557\nGeneration 40: Best Fitness = 55.36038509709411\nGeneration 41: Best Fitness = 55.36038509719148\nGeneration 42: Best Fitness = 51.85975546334996\nGeneration 43: Best Fitness = 56.669943433083986\nGeneration 44: Best Fitness = 54.91333720743469\nGeneration 45: Best Fitness = 55.79163777818965\nGeneration 46: Best Fitness = 55.79163777811419\nGeneration 47: Best Fitness = 54.91333720735614\nGeneration 48: Best Fitness = 54.91333720762562\nGeneration 49: Best Fitness = 54.91333720744726\nGeneration 50: Best Fitness = 52.684702104234816\nGeneration 51: Best Fitness = 52.684702104234816\nGeneration 52: Best Fitness = 53.1567366382147\nGeneration 53: Best Fitness = 53.1567366382147\nGeneration 54: Best Fitness = 51.842291485650364\nGeneration 55: Best Fitness = 53.15673663840513\nGeneration 56: Best Fitness = 53.15673663819526\nGeneration 57: Best Fitness = 52.04482206343915\nGeneration 58: Best Fitness = 53.15673663825758\nGeneration 59: Best Fitness = 52.2784210838103\nGeneration 60: Best Fitness = 51.354400666418215\nGeneration 61: Best Fitness = 51.40007543557751\nGeneration 62: Best Fitness = 54.68983340121237\nGeneration 63: Best Fitness = 53.15673663799714\nGeneration 64: Best Fitness = 58.42657624098892\nGeneration 65: Best Fitness = 55.93456201631594\nGeneration 66: Best Fitness = 55.93456201631594\nGeneration 67: Best Fitness = 55.93456201631594\nGeneration 68: Best Fitness = 55.791637777923285\nGeneration 69: Best Fitness = 58.42657624097155\nGeneration 70: Best Fitness = 54.913337207229645\nGeneration 71: Best Fitness = 55.79163777800863\nGeneration 72: Best Fitness = 56.66994343275909\nGeneration 73: Best Fitness = 54.20394846974561\nGeneration 74: Best Fitness = 54.00943230521281\nGeneration 75: Best Fitness = 53.457299969816894\nGeneration 76: Best Fitness = 53.3089541975604\nGeneration 77: Best Fitness = 56.66994343291312\nGeneration 78: Best Fitness = 54.91333720759443\nGeneration 79: Best Fitness = 57.548255898883305\nGeneration 80: Best Fitness = 56.66994343291312\nGeneration 81: Best Fitness = 55.79163777800999\nGeneration 82: Best Fitness = 53.1567366382714\nGeneration 83: Best Fitness = 54.868363111441724\nGeneration 84: Best Fitness = 58.426576240605634\nGeneration 85: Best Fitness = 57.54825589847911\nGeneration 86: Best Fitness = 54.66819720614008\nGeneration 87: Best Fitness = 54.369189968899924\nGeneration 88: Best Fitness = 52.903154510940794\nGeneration 89: Best Fitness = 58.42657624078224\nGeneration 90: Best Fitness = 58.42657624078224\nGeneration 91: Best Fitness = 55.79163777786753\nGeneration 92: Best Fitness = 52.2784210836191\nGeneration 93: Best Fitness = 54.03503868773489\nGeneration 94: Best Fitness = 54.03503868773489\nGeneration 95: Best Fitness = 53.070700261045054\nGeneration 96: Best Fitness = 57.5482558994299\nGeneration 97: Best Fitness = 58.42657624030527\nGeneration 98: Best Fitness = 54.93144230698824\nGeneration 99: Best Fitness = 54.91333720798083\n","output_type":"stream"}]},{"cell_type":"code","source":"def format_output(population, fitnesses, frequencies, df):\n    output_data = []\n    for structure, fitness in zip(population, fitnesses):\n        for freq in frequencies:\n            material_ids = [layer['Material ID'] for layer in structure]\n            thicknesses = [layer['Thickness'] for layer in structure]\n            eps_values = [1 + 0j if layer['Material ID'] == 0 else df[(df['Material ID'] == layer['Material ID']) & (df['Frequency'] == freq)].iloc[0]['epsilon_real'] + 1j * df[(df['Material ID'] == layer['Material ID']) & (df['Frequency'] == freq)].iloc[0]['epsilon_imag'] for layer in structure]\n            mu_values = [1 + 0j if layer['Material ID'] == 0 else df[(df['Material ID'] == layer['Material ID']) & (df['Frequency'] == freq)].iloc[0]['mu_real'] + 1j * df[(df['Material ID'] == layer['Material ID']) & (df['Frequency'] == freq)].iloc[0]['mu_imag'] for layer in structure]\n            \n            R, T = tmm(freq, thicknesses, eps_values, mu_values)\n            emi_se = calculate_shielding_effectiveness(R, T)\n            absorption = calculate_absorption(R, T)\n            \n            output_data.append({\n                'Frequency': freq,\n                'Material IDs': material_ids,\n                'Thickness': thicknesses,\n                'Epsilon': eps_values,\n                'Mu': mu_values,\n                'Reflection Coefficient': R,\n                'Transmission Coefficient': T,\n                'EMI Shielding Effectiveness': emi_se,\n                'Absorption': absorption,\n                'Fitness': fitness\n            })\n    \n    df_output = pd.DataFrame(output_data)\n    return df_output\n\n# Format and save the final output\nfinal_output = format_output(population, fitnesses, frequencies, df)\nfinal_output","metadata":{"execution":{"iopub.status.busy":"2024-06-24T04:57:59.575023Z","iopub.execute_input":"2024-06-24T04:57:59.575451Z","iopub.status.idle":"2024-06-24T04:58:00.034678Z","shell.execute_reply.started":"2024-06-24T04:57:59.575414Z","shell.execute_reply":"2024-06-24T04:58:00.033046Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 31\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m df_output\n\u001b[1;32m     30\u001b[0m \u001b[38;5;66;03m# Format and save the final output\u001b[39;00m\n\u001b[0;32m---> 31\u001b[0m final_output \u001b[38;5;241m=\u001b[39m format_output(\u001b[43mpopulation\u001b[49m, fitnesses, frequencies, df)\n\u001b[1;32m     32\u001b[0m final_output\n","\u001b[0;31mNameError\u001b[0m: name 'population' is not defined"],"ename":"NameError","evalue":"name 'population' is not defined","output_type":"error"}]}]}