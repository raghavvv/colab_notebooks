{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8024929,"sourceType":"datasetVersion","datasetId":4729219}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nimport seaborn as sns\nimport cmath\nimport math\nimport time\nimport matplotlib.pyplot as plt \nimport re\nfrom numba import jit\nimport random\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-11T10:26:22.041365Z","iopub.execute_input":"2024-06-11T10:26:22.042699Z","iopub.status.idle":"2024-06-11T10:26:22.059126Z","shell.execute_reply.started":"2024-06-11T10:26:22.042564Z","shell.execute_reply":"2024-06-11T10:26:22.057663Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"/kaggle/input/new-dielectric2/dielectric_restructured_2.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/new-dielectric2/dielectric_restructured_2.csv')\ndf[['epsilon_real', 'epsilon_imag']] = df['Epsilon'].str.strip('()j').str.split('+', expand=True).astype(float)\nmu_values = df['Mu'].apply(lambda x: re.findall(r'[-+]?\\d*\\.\\d+|\\d+', x))\ndf[['mu_real', 'mu_imag']] = pd.DataFrame(mu_values.tolist(), dtype=float)\ndf[['mu_real', 'mu_imag']] = df[['mu_real', 'mu_imag']].astype(float)\ndf['mu_imag'] = -1 * df['mu_imag']\ndf['epsilon_imag'] = -1 * df['epsilon_imag']\ndf.drop(['Epsilon'], axis=1, inplace=True)\ndf.drop(['Mu'], axis=1, inplace=True)\n\ndf['Thickness(m)'] = df['Thickness(mm)'] / 1e3\ndf['Thickness(m)'] = df['Thickness(m)'].clip(0.00005, 0.0003).round(6)  # Ensure thickness is within the desired range\ndf.drop(['Thickness(mm)'], axis=1, inplace=True)\n\ndf['Frequency'] = df['Frequency(GHz)'] * 1e9\ndf.drop(['Frequency(GHz)'], axis=1, inplace=True)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.061422Z","iopub.execute_input":"2024-06-11T10:26:22.063863Z","iopub.status.idle":"2024-06-11T10:26:22.135445Z","shell.execute_reply.started":"2024-06-11T10:26:22.063442Z","shell.execute_reply":"2024-06-11T10:26:22.134181Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"      S.No.  Material ID  epsilon_real  epsilon_imag  mu_real  mu_imag  \\\n0         1            1      320.6301     -495.4431   1.0000    -0.00   \n1         2            1      320.6301     -495.4431   1.0000    -0.00   \n2         3            1      320.6301     -495.4431   1.0000    -0.00   \n3         4            1      320.6301     -495.4431   1.0000    -0.00   \n4         5            1      320.6301     -495.4431   1.0000    -0.00   \n...     ...          ...           ...           ...      ...      ...   \n1495   1496            3        3.1563       -0.3053   0.9768    -0.09   \n1496   1497            3        3.1563       -0.3053   0.9768    -0.09   \n1497   1498            3        3.1563       -0.3053   0.9768    -0.09   \n1498   1499            3        3.1563       -0.3053   0.9768    -0.09   \n1499   1500            3        3.1563       -0.3053   0.9768    -0.09   \n\n      Thickness(m)     Frequency  \n0          0.00005  8.000000e+09  \n1          0.00010  8.000000e+09  \n2          0.00015  8.000000e+09  \n3          0.00020  8.000000e+09  \n4          0.00025  8.000000e+09  \n...            ...           ...  \n1495       0.00030  1.200000e+10  \n1496       0.00030  1.200000e+10  \n1497       0.00030  1.200000e+10  \n1498       0.00030  1.200000e+10  \n1499       0.00030  1.200000e+10  \n\n[1500 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>S.No.</th>\n      <th>Material ID</th>\n      <th>epsilon_real</th>\n      <th>epsilon_imag</th>\n      <th>mu_real</th>\n      <th>mu_imag</th>\n      <th>Thickness(m)</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00005</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00010</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00015</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00020</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1</td>\n      <td>320.6301</td>\n      <td>-495.4431</td>\n      <td>1.0000</td>\n      <td>-0.00</td>\n      <td>0.00025</td>\n      <td>8.000000e+09</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1495</th>\n      <td>1496</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00030</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1496</th>\n      <td>1497</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00030</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1497</th>\n      <td>1498</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00030</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1498</th>\n      <td>1499</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00030</td>\n      <td>1.200000e+10</td>\n    </tr>\n    <tr>\n      <th>1499</th>\n      <td>1500</td>\n      <td>3</td>\n      <td>3.1563</td>\n      <td>-0.3053</td>\n      <td>0.9768</td>\n      <td>-0.09</td>\n      <td>0.00030</td>\n      <td>1.200000e+10</td>\n    </tr>\n  </tbody>\n</table>\n<p>1500 rows Ã— 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"frequencies = [8e9, 9e9, 10e9, 11e9, 12e9]\npopulation_size = 1000\nnum_layers = 7\nnum_generations = 100\ncrossover_rate = 0.8\nmutation_rate = 0.8","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.137674Z","iopub.execute_input":"2024-06-11T10:26:22.138091Z","iopub.status.idle":"2024-06-11T10:26:22.144993Z","shell.execute_reply.started":"2024-06-11T10:26:22.138058Z","shell.execute_reply":"2024-06-11T10:26:22.143213Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"# Air properties\nair_id = 0\nair_eps = 1 + 0j\nair_mu = 1 + 0j\nair_thickness = 0  # Thickness of air layers\n\ndf_air = pd.DataFrame({\n    'Material ID': [air_id] * len(frequencies),\n    'Frequency': frequencies,\n    'epsilon_real': [air_eps.real] * len(frequencies),\n    'epsilon_imag': [air_eps.imag] * len(frequencies),\n    'mu_real': [air_mu.real] * len(frequencies),\n    'mu_imag': [air_mu.imag] * len(frequencies),\n    'Thickness(m)': [air_thickness] * len(frequencies)\n})\n\ndf = pd.concat([df, df_air], ignore_index=True)\n\n# Create a dictionary for frequency-specific properties\nmaterial_properties = {}\nfor _, row in df.iterrows():\n    material_id = row['Material ID']\n    frequency = row['Frequency']\n    if material_id not in material_properties:\n        material_properties[material_id] = {}\n    material_properties[material_id][frequency] = {\n        'epsilon': row['epsilon_real'] + 1j * row['epsilon_imag'],\n        'mu': row['mu_real'] + 1j * row['mu_imag'],\n        'thickness': row['Thickness(m)']\n    }","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.148170Z","iopub.execute_input":"2024-06-11T10:26:22.148614Z","iopub.status.idle":"2024-06-11T10:26:22.331617Z","shell.execute_reply.started":"2024-06-11T10:26:22.148582Z","shell.execute_reply":"2024-06-11T10:26:22.330290Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"def tmm(f, d, eps, mu):\n    \n    c = 3e8  # Speed of light in m/s\n    \n    M_total = np.identity(2, dtype=complex)\n    \n    for i in range(0, len(eps)-1):\n        k = (2 * np.pi * f / c) * np.sqrt(eps[i] * mu[i])\n        \n        M_propagation = np.array([[np.exp(-1j * k * d[i]), 0], [0, np.exp(1j * k * d[i])]], dtype=complex)\n        \n        Z = np.sqrt(mu[i] / eps[i])\n        Z_next = np.sqrt(mu[i+1] / eps[i+1])\n        \n        R = (Z - Z_next) / (Z_next + Z)\n        T = (2 * Z) / (Z_next + Z)\n        \n        # Check if T is close to zero, and handle the division by zero case\n        #if np.abs(T) < 1e-6:\n            #M_boundary = 0.5 * np.array([[1 + (Z / Z_next), 1 - (Z / Z_next)], [1 - (Z / Z_next), 1 + (Z / Z_next)]], dtype=complex)\n        #else:\n        M_boundary = np.array([[1, R], [R, 1]], dtype=complex)\n        \n        #M_boundary_inv = np.linalg.inv(M_boundary)\n        \n        M_total = (1/T) * np.matmul(np.matmul(M_boundary, M_propagation), M_total)\n    \n    R1 = -1 * (M_total[1, 0] / M_total[1, 1])  #if abs(M_total[0, 0]) > 1e-6 else 1.0\n    T1 = (M_total[0,0] + (M_total[0,1]*R1)) #if abs(M_total[0, 0]) > 1e-6 else 0.0 \n    \n    R2 = np.abs(R1)**2\n    T2 = np.abs(T1)**2\n    return R2, T2\n\ndef calculate_shielding_effectiveness(R2,T2):\n    emi_se = 10*np.log10(1/(np.abs(T2)))\n    return emi_se\n\ndef calculate_absorption(R2,T2):\n    absorption = 1 - (R2 + T2)\n    return absorption\n\nf = 8e9\nd = [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, 0.0]\neps = [(1+0j), (44.0257-58.6855j), (3.3595-0.03338j), (320.6301-495.4431j), (44.0257-58.6855j), (3.3595-0.03338j), (1+0j)]\nmu = [(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0j), (0.883-0.0324j), (1+0j)]\n\n\nR, T = tmm(f, d, eps, mu)\nshielding_effectiveness = calculate_shielding_effectiveness(R,T)\nabsorption = calculate_absorption(R,T)\n\nprint(\"reflection:\", R)\nprint(\"transmission:\", T)\nprint(\"shielding effectiveness:\", shielding_effectiveness)\nprint(\"absorption:\", absorption)","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:38:44.544925Z","iopub.execute_input":"2024-06-11T10:38:44.545669Z","iopub.status.idle":"2024-06-11T10:38:44.569542Z","shell.execute_reply.started":"2024-06-11T10:38:44.545505Z","shell.execute_reply":"2024-06-11T10:38:44.568274Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"reflection: 0.8107749943432702\ntransmission: 0.005069576408021708\nshielding effectiveness: 22.950283269278362\nabsorption: 0.1841554292487081\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_initial_population(material_properties, frequencies, population_size, num_layers):\n    population = []\n    for _ in range(population_size):\n        structure = [{'Material ID': air_id, 'Frequency': freq} for freq in frequencies]  # First layer is air\n        for _ in range(num_layers - 2):\n            material_id = random.choice(list(material_properties.keys()))\n            while len(structure) > 1 and structure[-1]['Material ID'] == material_id:\n                material_id = random.choice(list(material_properties.keys()))\n            structure.append({'Material ID': material_id, 'Frequency': frequencies[1]})\n        structure.append({'Material ID': air_id, 'Frequency': frequencies[1]})  # Last layer is air\n        population.append(structure)\n    return population\n","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.364161Z","iopub.execute_input":"2024-06-11T10:26:22.365343Z","iopub.status.idle":"2024-06-11T10:26:22.384441Z","shell.execute_reply.started":"2024-06-11T10:26:22.365294Z","shell.execute_reply":"2024-06-11T10:26:22.382984Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"def evaluate_fitness(structure, frequencies):\n    total_absorption = 0\n    total_reflection = 0\n    total_transmission = 0\n    total_emi_se = 0\n    \n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        E = calculate_shielding_effectiveness(R,T)\n        \n        total_absorption += A\n        total_reflection += R\n        total_transmission += T\n        total_emi_se += emi_se\n    \n    average_absorption = total_absorption / len(frequencies)\n    average_reflection = total_reflection / len(frequencies)\n    average_transmission = total_transmission / len(frequencies)\n    average_emi_se = total_emi_se / len(frequencies)\n    \n    fitness = (average_absorption + average_reflection + average_transmission + average_emi_se) / 4\n    \n    return fitness","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.385917Z","iopub.execute_input":"2024-06-11T10:26:22.386412Z","iopub.status.idle":"2024-06-11T10:26:22.408114Z","shell.execute_reply.started":"2024-06-11T10:26:22.386369Z","shell.execute_reply":"2024-06-11T10:26:22.406118Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"def select_parents(population, fitnesses, num_parents):\n    parents = random.choices(population, weights=fitnesses, k=num_parents)\n    return parents\n\n# Crossover\ndef crossover(parents, crossover_rate):\n    offspring = []\n    for _ in range(len(parents) // 2):\n        parent1 = random.choice(parents)\n        parent2 = random.choice(parents)\n        if random.random() < crossover_rate:\n            crossover_point = random.randint(1, len(parent1) - 2)\n            child1 = parent1[:crossover_point] + parent2[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies)}]\n            child2 = parent2[:crossover_point] + parent1[crossover_point:-1] + [{'Material ID': air_id, 'Frequency': random.choice(frequencies)}]\n            offspring.append(child1)\n            offspring.append(child2)\n        else:\n            offspring.append(parent1)\n            offspring.append(parent2)\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.410297Z","iopub.execute_input":"2024-06-11T10:26:22.411259Z","iopub.status.idle":"2024-06-11T10:26:22.433486Z","shell.execute_reply.started":"2024-06-11T10:26:22.411201Z","shell.execute_reply":"2024-06-11T10:26:22.431992Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"def mutate(offspring, mutation_rate, material_properties):\n    for child in offspring:\n        if random.random() < mutation_rate:\n            mutation_point = random.randint(1, len(child) - 2)\n            material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            while len(child) > 1 and child[mutation_point - 1]['Material ID'] == material_id:\n                material_id = random.choice([mid for mid in material_properties.keys() if mid != air_id])\n            thickness = np.random.uniform(0.0001, 0.0003)\n            child[mutation_point] = {'Material ID': material_id, 'Frequency': random.choice(frequencies), 'Thickness': thickness}\n    return offspring","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.435706Z","iopub.execute_input":"2024-06-11T10:26:22.436158Z","iopub.status.idle":"2024-06-11T10:26:22.452273Z","shell.execute_reply.started":"2024-06-11T10:26:22.436125Z","shell.execute_reply":"2024-06-11T10:26:22.450712Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"def genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate):\n    population = generate_initial_population(material_properties, frequencies, population_size, num_layers)\n    for generation in range(num_generations):\n        fitnesses = [evaluate_fitness(structure, frequencies) for structure in population]\n        print(f\"Generation {generation}: Best Fitness = {max(fitnesses)}\")  # Debugging statement\n        if max(fitnesses) > 0.75:\n            break\n        parents = select_parents(population, fitnesses, population_size // 2)\n        offspring = crossover(parents, crossover_rate)\n        population = mutate(offspring, mutation_rate, material_properties)\n    return population, fitnesses","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.454327Z","iopub.execute_input":"2024-06-11T10:26:22.454807Z","iopub.status.idle":"2024-06-11T10:26:22.475442Z","shell.execute_reply.started":"2024-06-11T10:26:22.454720Z","shell.execute_reply":"2024-06-11T10:26:22.473987Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"population, fitnesses = genetic_algorithm(material_properties, frequencies, population_size, num_layers, num_generations, crossover_rate, mutation_rate)\n\n# Filter structures with absorption > 0.75\nfiltered_structures = [structure for structure, fitness in zip(population, fitnesses) if fitness > 0.75]","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:22.478897Z","iopub.execute_input":"2024-06-11T10:26:22.479416Z","iopub.status.idle":"2024-06-11T10:26:23.611748Z","shell.execute_reply.started":"2024-06-11T10:26:22.479372Z","shell.execute_reply":"2024-06-11T10:26:23.609982Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"Generation 0: Best Fitness = 6.57968262666893\n","output_type":"stream"}]},{"cell_type":"code","source":"filtered_data = []\nfor structure in filtered_structures:\n    for f in frequencies:\n        d = [material_properties[layer['Material ID']][f]['thickness'] for layer in structure]\n        eps = [material_properties[layer['Material ID']][f]['epsilon'] for layer in structure]\n        mu = [material_properties[layer['Material ID']][f]['mu'] for layer in structure]\n        R, T = tmm(f, d, eps, mu)\n        A = calculate_absorption(R,T)\n        emi_se = calculate_shielding_effectiveness(R,T)\n        filtered_data.append({\n            'Frequency': f,\n            'Material IDs': [layer['Material ID'] for layer in structure],\n            'Thickness': d,\n            'Epsilon': eps,\n            'Mu': mu,\n            'Reflection Coefficient': R,\n            'Transmission Coefficient': T,\n            'EMI Shielding Effectiveness': emi_se,\n            'Absorption': A\n        })\n\nfiltered_df = pd.DataFrame(filtered_data)\n\n# Print filtered DataFrame\nfiltered_df","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:23.613664Z","iopub.execute_input":"2024-06-11T10:26:23.614079Z","iopub.status.idle":"2024-06-11T10:26:25.046927Z","shell.execute_reply.started":"2024-06-11T10:26:23.614031Z","shell.execute_reply":"2024-06-11T10:26:25.045007Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"         Frequency                     Material IDs  \\\n0     8.000000e+09  [0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]   \n1     9.000000e+09  [0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]   \n2     1.000000e+10  [0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]   \n3     1.100000e+10  [0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]   \n4     1.200000e+10  [0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]   \n...            ...                              ...   \n4995  8.000000e+09  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4996  9.000000e+09  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4997  1.000000e+10  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4998  1.100000e+10  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n4999  1.200000e+10  [0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]   \n\n                                              Thickness  \\\n0     [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n1     [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n2     [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n3     [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n4     [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n...                                                 ...   \n4995  [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n4996  [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n4997  [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n4998  [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n4999  [0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...   \n\n                                                Epsilon  \\\n0     [(1+0j), (44.0257-58.6855j), (3.3595-0.03338j)...   \n1     [(1+0j), (41.112-57.0349j), (3.1533-0.3044j), ...   \n2     [(1+0j), (37.5967-54.2959j), (3.1652-0.3126j),...   \n3     [(1+0j), (34.0151-51.1122j), (3.1588-0.2425j),...   \n4     [(1+0j), (32.2393-47.5891j), (3.1563-0.3053j),...   \n...                                                 ...   \n4995  [(1+0j), (3.3595-0.03338j), (44.0257-58.6855j)...   \n4996  [(1+0j), (3.1533-0.3044j), (41.112-57.0349j), ...   \n4997  [(1+0j), (3.1652-0.3126j), (37.5967-54.2959j),...   \n4998  [(1+0j), (3.1588-0.2425j), (34.0151-51.1122j),...   \n4999  [(1+0j), (3.1563-0.3053j), (32.2393-47.5891j),...   \n\n                                                     Mu  \\\n0     [(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0...   \n1     [(1+0j), (1+0j), (1.2109-0.1297j), (1+0j), (1+...   \n2     [(1+0j), (1+0j), (1.0601-0.0698j), (1+0j), (1+...   \n3     [(1+0j), (1+0j), (1.0031-0.1839j), (1+0j), (1+...   \n4     [(1+0j), (1+0j), (0.9768-0.09j), (1+0j), (1+0j...   \n...                                                 ...   \n4995  [(1+0j), (0.883-0.0324j), (1+0j), (0.883-0.032...   \n4996  [(1+0j), (1.2109-0.1297j), (1+0j), (1.2109-0.1...   \n4997  [(1+0j), (1.0601-0.0698j), (1+0j), (1.0601-0.0...   \n4998  [(1+0j), (1.0031-0.1839j), (1+0j), (1.0031-0.1...   \n4999  [(1+0j), (0.9768-0.09j), (1+0j), (0.9768-0.09j...   \n\n      Reflection Coefficient  Transmission Coefficient  \\\n0                   0.810775                  0.005070   \n1                   0.716597                  0.006249   \n2                   0.716713                  0.005733   \n3                   0.679682                  0.005069   \n4                   0.655415                  0.005505   \n...                      ...                       ...   \n4995                0.639685                  0.059300   \n4996                0.616599                  0.052653   \n4997                0.629811                  0.050803   \n4998                0.598938                  0.045896   \n4999                0.613931                  0.048124   \n\n      EMI Shielding Effectiveness  Absorption  \n0                       22.950283    0.184155  \n1                       22.041689    0.277154  \n2                       22.416236    0.277554  \n3                       22.950700    0.315249  \n4                       22.592167    0.339079  \n...                           ...         ...  \n4995                    12.269465    0.301016  \n4996                    12.785746    0.330748  \n4997                    12.941082    0.319386  \n4998                    13.382259    0.355166  \n4999                    13.176422    0.337946  \n\n[5000 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Frequency</th>\n      <th>Material IDs</th>\n      <th>Thickness</th>\n      <th>Epsilon</th>\n      <th>Mu</th>\n      <th>Reflection Coefficient</th>\n      <th>Transmission Coefficient</th>\n      <th>EMI Shielding Effectiveness</th>\n      <th>Absorption</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.000000e+09</td>\n      <td>[0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (44.0257-58.6855j), (3.3595-0.03338j)...</td>\n      <td>[(1+0j), (1+0j), (0.883-0.0324j), (1+0j), (1+0...</td>\n      <td>0.810775</td>\n      <td>0.005070</td>\n      <td>22.950283</td>\n      <td>0.184155</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.000000e+09</td>\n      <td>[0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (41.112-57.0349j), (3.1533-0.3044j), ...</td>\n      <td>[(1+0j), (1+0j), (1.2109-0.1297j), (1+0j), (1+...</td>\n      <td>0.716597</td>\n      <td>0.006249</td>\n      <td>22.041689</td>\n      <td>0.277154</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.000000e+10</td>\n      <td>[0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (37.5967-54.2959j), (3.1652-0.3126j),...</td>\n      <td>[(1+0j), (1+0j), (1.0601-0.0698j), (1+0j), (1+...</td>\n      <td>0.716713</td>\n      <td>0.005733</td>\n      <td>22.416236</td>\n      <td>0.277554</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.100000e+10</td>\n      <td>[0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (34.0151-51.1122j), (3.1588-0.2425j),...</td>\n      <td>[(1+0j), (1+0j), (1.0031-0.1839j), (1+0j), (1+...</td>\n      <td>0.679682</td>\n      <td>0.005069</td>\n      <td>22.950700</td>\n      <td>0.315249</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.200000e+10</td>\n      <td>[0, 2.0, 3.0, 1.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (32.2393-47.5891j), (3.1563-0.3053j),...</td>\n      <td>[(1+0j), (1+0j), (0.9768-0.09j), (1+0j), (1+0j...</td>\n      <td>0.655415</td>\n      <td>0.005505</td>\n      <td>22.592167</td>\n      <td>0.339079</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4995</th>\n      <td>8.000000e+09</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (3.3595-0.03338j), (44.0257-58.6855j)...</td>\n      <td>[(1+0j), (0.883-0.0324j), (1+0j), (0.883-0.032...</td>\n      <td>0.639685</td>\n      <td>0.059300</td>\n      <td>12.269465</td>\n      <td>0.301016</td>\n    </tr>\n    <tr>\n      <th>4996</th>\n      <td>9.000000e+09</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (3.1533-0.3044j), (41.112-57.0349j), ...</td>\n      <td>[(1+0j), (1.2109-0.1297j), (1+0j), (1.2109-0.1...</td>\n      <td>0.616599</td>\n      <td>0.052653</td>\n      <td>12.785746</td>\n      <td>0.330748</td>\n    </tr>\n    <tr>\n      <th>4997</th>\n      <td>1.000000e+10</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (3.1652-0.3126j), (37.5967-54.2959j),...</td>\n      <td>[(1+0j), (1.0601-0.0698j), (1+0j), (1.0601-0.0...</td>\n      <td>0.629811</td>\n      <td>0.050803</td>\n      <td>12.941082</td>\n      <td>0.319386</td>\n    </tr>\n    <tr>\n      <th>4998</th>\n      <td>1.100000e+10</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (3.1588-0.2425j), (34.0151-51.1122j),...</td>\n      <td>[(1+0j), (1.0031-0.1839j), (1+0j), (1.0031-0.1...</td>\n      <td>0.598938</td>\n      <td>0.045896</td>\n      <td>13.382259</td>\n      <td>0.355166</td>\n    </tr>\n    <tr>\n      <th>4999</th>\n      <td>1.200000e+10</td>\n      <td>[0, 3.0, 2.0, 3.0, 2.0, 3.0, 0]</td>\n      <td>[0.0, 0.0003, 0.0003, 0.0003, 0.0003, 0.0003, ...</td>\n      <td>[(1+0j), (3.1563-0.3053j), (32.2393-47.5891j),...</td>\n      <td>[(1+0j), (0.9768-0.09j), (1+0j), (0.9768-0.09j...</td>\n      <td>0.613931</td>\n      <td>0.048124</td>\n      <td>13.176422</td>\n      <td>0.337946</td>\n    </tr>\n  </tbody>\n</table>\n<p>5000 rows Ã— 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"filtered_df.to_csv('new_combinations.csv', encoding='utf-8')","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:25.048898Z","iopub.execute_input":"2024-06-11T10:26:25.049347Z","iopub.status.idle":"2024-06-11T10:26:25.295943Z","shell.execute_reply.started":"2024-06-11T10:26:25.049313Z","shell.execute_reply":"2024-06-11T10:26:25.294714Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.histplot(filtered_df['Absorption'], bins=20, kde=True)\nplt.title('Histogram of Absorption Values')\nplt.xlabel('Absorption')\nplt.ylabel('Number of Samples')\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-11T10:26:25.297093Z","iopub.execute_input":"2024-06-11T10:26:25.297512Z","iopub.status.idle":"2024-06-11T10:26:25.852313Z","shell.execute_reply.started":"2024-06-11T10:26:25.297480Z","shell.execute_reply":"2024-06-11T10:26:25.850944Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]}]}